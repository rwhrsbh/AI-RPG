/**
 * Voice Generator for D&D Game
 * Uses Gemini API to generate voice narration based on game events
 */

// –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
let isGeneratingVoice = false;
let voiceQueue = [];
let currentlyPlaying = null;
let isVoiceStopRequested = false;  // –ù–æ–≤–∏–π –ø—Ä–∞–ø–æ—Ä–µ—Ü—å –¥–ª—è –∑—É–ø–∏–Ω–∫–∏ –æ–±—Ä–æ–±–∫–∏ –≥–æ–ª–æ—Å—É
let currentTTSAbortController = null; // –ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –º–µ—Ä–µ–∂–µ–≤–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
let voiceContext = {
    voice: 'Zephyr',
    isEnabled: true,
    volume: 1.0,
    playbackRate: 1.0, // –®–≤–∏–¥–∫—ñ—Å—Ç—å –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    service: 'gemini', // 'gemini' –∞–±–æ 'elevenlabs'
    elevenLabsApiKey: '', // API –∫–ª—é—á –¥–ª—è ElevenLabs
    elevenLabsVoice: 'EXAVITQu4vr4xnSDxMaL' // ID –≥–æ–ª–æ—Å—É ElevenLabs (Rachel –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º)
};

// –î–æ—Å—Ç—É–ø–Ω—ñ –≥–æ–ª–æ—Å–∏ Gemini
const AVAILABLE_VOICES = [
    'Sulafat', 'Sadaltager', 'Sadachbia', 'Vindemiatrix', 'Zubenelgenubi', 
    'Achird', 'Pulcherrima', 'Gacrux', 'Schedar', 'Alnilam', 
    'Achernar', 'Laomedeia', 'Rasalgethi', 'Algenib', 'Erinome', 
    'Despina', 'Algieba', 'Umbriel', 'Iapetus', 'Enceladus', 
    'Autonoe', 'Callirrhoe', 'Aoede', 'Orus', 'Leda', 
    'Fenrir', 'Kore', 'Charon', 'Puck', 'Zephyr'
];

/**
 * –°—Ç–≤–æ—Ä—é—î —ñ –ø–æ–∫–∞–∑—É—î –≤—ñ–∑—É–∞–ª—å–Ω–∏–π —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞–Ω—É TTS
 * @param {string} status - –°—Ç–∞—Ç—É—Å TTS ('generating', 'error', 'playing', 'off')
 * @param {string} message - –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
 */
function showTTSIndicator(status, message = '') {
    // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä, —è–∫—â–æ –≤—ñ–Ω —ñ—Å–Ω—É—î
    removeTTSIndicator();
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä
    const indicator = document.createElement('div');
    indicator.id = 'tts-status-indicator';
    indicator.style.position = 'fixed';
    indicator.style.bottom = '20px';
    indicator.style.left = '20px';
    indicator.style.padding = '10px 15px';
    indicator.style.borderRadius = '5px';
    indicator.style.fontSize = '14px';
    indicator.style.zIndex = '9999';
    indicator.style.display = 'flex';
    indicator.style.alignItems = 'center';
    indicator.style.gap = '10px';
    indicator.style.transition = 'opacity 0.3s ease';
    indicator.style.opacity = '0.9';
    
    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫–æ–ª—ñ—Ä —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Å—Ç–∞—Ç—É—Å—É
    switch (status) {
        case 'generating':
            indicator.style.backgroundColor = '#4285f4'; // –°–∏–Ω—ñ–π
            indicator.style.color = 'white';
            indicator.innerHTML = `
                <span style="display: inline-block; width: 16px; height: 16px; border: 3px solid white; 
                border-top-color: transparent; border-radius: 50%; animation: tts-spin 1s linear infinite;"></span>
                <span>${message || 'Generating speech...'}</span>
            `;
            break;
        case 'error':
            indicator.style.backgroundColor = '#ea4335'; // –ß–µ—Ä–≤–æ–Ω–∏–π
            indicator.style.color = 'white';
            indicator.innerHTML = `
                <span style="font-weight: bold;">‚ö†Ô∏è</span>
                <span>${message || 'Speech generation error'}</span>
            `;
            // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            setTimeout(() => {
                removeTTSIndicator();
            }, 1000);
            break;
        case 'playing':
            indicator.style.backgroundColor = '#34a853'; // –ó–µ–ª–µ–Ω–∏–π
            indicator.style.color = 'white';
            
            // –°—Ç–≤–æ—Ä—é—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            const contentContainer = document.createElement('div');
            contentContainer.style.display = 'flex';
            contentContainer.style.flexDirection = 'column';
            contentContainer.style.alignItems = 'flex-start';
            contentContainer.style.gap = '8px';
            
            // –î–æ–¥–∞—î–º–æ –≤–µ—Ä—Ö–Ω—ñ–π —Ä—è–¥–æ–∫ –∑ —ñ–∫–æ–Ω–∫–æ—é —Ç–∞ —Ç–µ–∫—Å—Ç–æ–º
            const topRow = document.createElement('div');
            topRow.style.display = 'flex';
            topRow.style.alignItems = 'center';
            topRow.style.gap = '10px';
            topRow.innerHTML = `
                <span style="font-weight: bold;">üîä</span>
                <span>${message || 'Playing speech'} (${voiceContext.playbackRate}x)</span>
            `;
            
            // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ —à–≤–∏–¥–∫–æ—Å—Ç—ñ
            const speedButtons = document.createElement('div');
            speedButtons.style.display = 'flex';
            speedButtons.style.gap = '5px';
            speedButtons.style.marginTop = '5px';
            
            // –®–≤–∏–¥–∫–æ—Å—Ç—ñ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è
            const speeds = [1, 1.25, 1.5, 1.75, 2.0, 2.25, 2.5, 2.75, 3.0];
            
            // –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ —à–≤–∏–¥–∫–æ—Å—Ç—ñ
            speeds.forEach(speed => {
                const button = document.createElement('button');
                button.textContent = speed + 'x';
                button.style.padding = '3px 6px';
                button.style.border = voiceContext.playbackRate === speed ? '2px solid white' : '1px solid rgba(255,255,255,0.5)';
                button.style.borderRadius = '3px';
                button.style.background = voiceContext.playbackRate === speed ? 'rgba(255,255,255,0.3)' : 'transparent';
                button.style.color = 'white';
                button.style.fontSize = '12px';
                button.style.cursor = 'pointer';
                button.style.margin = '0';
                button.style.lineHeight = '1';
                
                // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫—É –¥–ª—è –∑–º—ñ–Ω–∏ —à–≤–∏–¥–∫–æ—Å—Ç—ñ
                button.onclick = () => {
                    setPlaybackRate(speed);
                };
                
                speedButtons.appendChild(button);
            });
            
            // –î–æ–¥–∞—î–º–æ —Ä—è–¥–∫–∏ –¥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            contentContainer.appendChild(topRow);
            contentContainer.appendChild(speedButtons);
            
            // –î–æ–¥–∞—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
            indicator.appendChild(contentContainer);
            break;
        case 'off':
            indicator.style.backgroundColor = '#9aa0a6'; // –°—ñ—Ä–∏–π
            indicator.style.color = 'white';
            indicator.innerHTML = `
                <span style="font-weight: bold;">üîá</span>
                    <span>${message || 'Speech disabled'}</span>
                `;
            // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥–∏
            setTimeout(() => {
                removeTTSIndicator();
            }, 3000);
            break;
    }
    
    // –î–æ–¥–∞—î–º–æ —Å—Ç–∏–ª—å –¥–ª—è –∞–Ω—ñ–º–∞—Ü—ñ—ó
    const style = document.createElement('style');
    style.textContent = `
        @keyframes tts-spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    `;
    document.head.appendChild(style);
    
    // –î–æ–¥–∞—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–æ DOM
    document.body.appendChild(indicator);
    
    // –ê–Ω—ñ–º—É—î–º–æ –ø–æ—è–≤—É
    setTimeout(() => {
        indicator.style.opacity = '1';
    }, 10);
}

/**
 * –í–∏–¥–∞–ª—è—î –≤—ñ–∑—É–∞–ª—å–Ω–∏–π —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞–Ω—É TTS
 */
function removeTTSIndicator() {
    const indicator = document.getElementById('tts-status-indicator');
    if (indicator) {
        // –ê–Ω—ñ–º—É—î–º–æ –∑–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –≤–∏–¥–∞–ª–µ–Ω–Ω—è–º
        indicator.style.opacity = '0';
        setTimeout(() => {
            if (indicator.parentNode) {
                indicator.parentNode.removeChild(indicator);
            }
        }, 300);
    }
}

/**
 * –ì–µ–Ω–µ—Ä—É—î –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
 * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è
 * @param {Object} options - –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
 * @param {string} options.voice - –ì–æ–ª–æ—Å –¥–ª—è –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è
 * @param {string} options.instructions - –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è (—Ç–æ–Ω, –µ–º–æ—Ü—ñ—ó —Ç–æ—â–æ)
 * @param {string} options.service - –°–µ—Ä–≤—ñ—Å –¥–ª—è –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è ('gemini' –∞–±–æ 'elevenlabs')
 * @returns {Promise<void>}
 */
async function generateVoice(text, options = {}) {
    console.log('=============== –ì–ï–ù–ï–†–ê–¶–Ü–Ø –û–ó–í–£–ß–£–í–ê–ù–ù–Ø ===============');
    console.log('–¢–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è (–ø–µ—Ä—à—ñ 100 —Å–∏–º–≤–æ–ª—ñ–≤):', text ? text.substring(0, 100) + '...' : '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ');
    console.log('–û–ø—Ü—ñ—ó:', JSON.stringify(options));
    
    // –Ø–∫—â–æ –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ, –æ–¥—Ä–∞–∑—É –≤–∏—Ö–æ–¥–∏–º–æ
    if (!voiceContext.isEnabled) {
        console.log('–û–∑–≤—É—á—É–≤–∞–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö');
        showTTSIndicator('off');
        return;
    }
    
    // –Ø–∫—â–æ —Ç–µ–∫—Å—Ç –ø–æ—Ä–æ–∂–Ω—ñ–π, –≤–∏—Ö–æ–¥–∏–º–æ
    if (!text || typeof text !== 'string' || text.trim() === '') {
        console.log('–ü–æ—Ä–æ–∂–Ω—ñ–π —Ç–µ–∫—Å—Ç, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è');
        return;
    }
    
    // –°–∫–∞—Å–æ–≤—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –∑–∞–ø–∏—Ç TTS, —è–∫—â–æ –≤—ñ–Ω —ñ—Å–Ω—É—î
    if (currentTTSAbortController) {
        console.log('–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∑–∞–ø–∏—Ç—É TTS...');
        currentTTSAbortController.abort();
        currentTTSAbortController = null;
        
        // –í–∏–¥–∞–ª—è—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä, —è–∫—â–æ –≤—ñ–Ω –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è
        removeTTSIndicator();
    }
    
    // –°–∫–∏–¥–∞—î–º–æ –ø—Ä–∞–ø–æ—Ä–µ—Ü—å –∑—É–ø–∏–Ω–∫–∏ –≥–æ–ª–æ—Å—É
    isVoiceStopRequested = false;
    
    const service = options.service || voiceContext.service;
    
    // –í–∏–±–∏—Ä–∞—î–º–æ –≥–æ–ª–æ—Å –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Å–µ—Ä–≤—ñ—Å—É
    let voice;
    if (service === 'elevenlabs') {
        voice = options.voice || voiceContext.elevenLabsVoice;
    } else {
        voice = options.voice || voiceContext.voice;
    }
    
    let instructions = '';
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó —Ä—è–¥–∫–æ–º
    if (options.instructions && typeof options.instructions === 'string') {
        instructions = options.instructions;
    } else if (options.instructions && typeof options.instructions === 'object') {
        // –°–ø—Ä–æ–±—É—î–º–æ –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ –æ–±'—î–∫—Ç –Ω–∞ —Ä—è–¥–æ–∫
        try {
            instructions = JSON.stringify(options.instructions);
        } catch (e) {
            console.warn('–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –Ω–∞ —Ä—è–¥–æ–∫:', e);
        }
    }
    
    // –ó—É–ø–∏–Ω—è—î–º–æ –ø–æ—Ç–æ—á–Ω–µ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –¥–æ–¥–∞–≤–∞–Ω–Ω—è–º –Ω–æ–≤–æ–≥–æ
    if (currentlyPlaying) {
        stopVoice();
    }
    
    // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
    showTTSIndicator('generating');
    
    // –†–æ–∑–±–∏–≤–∞—î–º–æ —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏ –¥–ª—è –∫—Ä–∞—â–æ—ó –æ–±—Ä–æ–±–∫–∏
    const textChunks = splitTextIntoChunks(text);
    console.log(`–¢–µ–∫—Å—Ç —Ä–æ–∑–±–∏—Ç–æ –Ω–∞ ${textChunks.length} —á–∞—Å—Ç–∏–Ω`);
    
    // –î–æ–¥–∞—î–º–æ —á–∞—Å—Ç–∏–Ω–∏ —Ç–µ–∫—Å—Ç—É –¥–æ —á–µ—Ä–≥–∏ –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è
    for (const chunk of textChunks) {
        voiceQueue.push({ text: chunk, voice, instructions, service });
    }
    
    // –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ–±—Ä–æ–±–∫—É —á–µ—Ä–≥–∏, —è–∫—â–æ –≤–æ–Ω–∞ —â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞
    if (!isGeneratingVoice) {
        processVoiceQueue();
    }
}

/**
 * –†–æ–∑–±–∏–≤–∞—î —Ç–µ–∫—Å—Ç –Ω–∞ –º–µ–Ω—à—ñ —á–∞—Å—Ç–∏–Ω–∏ –¥–ª—è –∫—Ä–∞—â–æ—ó –æ–±—Ä–æ–±–∫–∏
 * @param {string} text - –í—Ö—ñ–¥–Ω–∏–π —Ç–µ–∫—Å—Ç
 * @param {number} maxSentences - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ—á–µ–Ω—å –≤ –æ–¥–Ω—ñ–π —á–∞—Å—Ç–∏–Ω—ñ
 * @returns {string[]} - –ú–∞—Å–∏–≤ —á–∞—Å—Ç–∏–Ω —Ç–µ–∫—Å—Ç—É
 */
function splitTextIntoChunks(text, maxSentences = 2) {
    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤–µ—Å—å —Ç–µ–∫—Å—Ç —è–∫ –æ–¥–Ω—É —á–∞—Å—Ç–∏–Ω—É
    return [text.trim()];
    
    // –°—Ç–∞—Ä–∏–π –∫–æ–¥ –¥–ª—è —Ä–æ–∑–±–∏—Ç—Ç—è –Ω–∞ —Ä–µ—á–µ–Ω–Ω—è (–∑–∞–∫–æ–º–µ–Ω—Ç–æ–≤–∞–Ω–∏–π)
    /*
    // –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ —Ä–µ—á–µ–Ω–Ω—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤–∏—Ä–∞–∑—É
    // –®—É–∫–∞—î–º–æ –∫—Ä–∞–ø–∫—É, –∑–Ω–∞–∫ –æ–∫–ª–∏–∫—É –∞–±–æ –∑–Ω–∞–∫ –ø–∏—Ç–∞–Ω–Ω—è, –∑–∞ —è–∫–∏–º–∏ –π–¥–µ –ø—Ä–æ–±—ñ–ª –∞–±–æ –∫—ñ–Ω–µ—Ü—å —Ä—è–¥–∫–∞
    const sentences = text.split(/(?<=[.!?])\s+/);
    const chunks = [];
    
    // –û–±'—î–¥–Ω—É—î–º–æ —Ä–µ—á–µ–Ω–Ω—è –≤ —á–∞—Å—Ç–∏–Ω–∏ –ø–æ maxSentences —à—Ç—É–∫
    for (let i = 0; i < sentences.length; i += maxSentences) {
        const chunk = sentences.slice(i, i + maxSentences).join(' ');
        if (chunk.trim() !== '') {
            chunks.push(chunk);
        }
    }
    
    return chunks;
    */
}

/**
 * –û–±—Ä–æ–±–ª—è—î —á–µ—Ä–≥—É –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ
 * @returns {Promise<void>}
 */
async function processVoiceQueue() {
    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–∞–ø–æ—Ä–µ—Ü—å, —â–æ –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è –≤ –ø—Ä–æ—Ü–µ—Å—ñ
    isGeneratingVoice = true;
    console.log(`–ü–æ—á–∞—Ç–æ–∫ –æ–±—Ä–æ–±–∫–∏ —á–µ—Ä–≥–∏ –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è. –ö—ñ–ª—å–∫—ñ—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤: ${voiceQueue.length}`);
    
    let processedCount = 0;
    let errorCount = 0;
    
    while (voiceQueue.length > 0) {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –∑–∞–ø–∏—Ç–∞–Ω–æ –ø—Ä–∏–ø–∏–Ω–µ–Ω–Ω—è –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è
        if (isVoiceStopRequested) {
            console.log('–û–±—Ä–æ–±–∫—É —á–µ—Ä–≥–∏ –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è –∑—É–ø–∏–Ω–µ–Ω–æ –Ω–∞ –≤–∏–º–æ–≥—É');
            voiceQueue = [];  // –û—á–∏—â–∞—î–º–æ —á–µ—Ä–≥—É
            removeTTSIndicator();
            break;
        }
        
        // –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç –∑ —á–µ—Ä–≥–∏
        const item = voiceQueue.shift();
        processedCount++;
        
        console.log(`–û–±—Ä–æ–±–∫–∞ –µ–ª–µ–º–µ–Ω—Ç–∞ –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è ${processedCount}/${processedCount + voiceQueue.length}`);
        console.log(`–¢–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è: ${item.text.substring(0, 50)}...`);
        
        try {
            // –ì–µ–Ω–µ—Ä—É—î–º–æ –∞—É–¥—ñ–æ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –≤–∏–±—Ä–∞–Ω–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É
            console.log(`–ó–∞–ø–∏—Ç –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è –¥–ª—è –≥–æ–ª–æ—Å—É ${item.voice} —á–µ—Ä–µ–∑ —Å–µ—Ä–≤—ñ—Å ${item.service || voiceContext.service}...`);
            
            let audioBlob;
            const service = item.service || voiceContext.service;
            
            if (service === 'elevenlabs') {
                audioBlob = await fetchElevenLabsVoiceAudio(item.text, item.voice, item.instructions);
            } else {
                audioBlob = await fetchGeminiVoiceAudio(item.text, item.voice, item.instructions);
            }
            
            // –ó–Ω–æ–≤—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –∑–∞–ø–∏—Ç–∞–Ω–æ –ø—Ä–∏–ø–∏–Ω–µ–Ω–Ω—è –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è
            if (isVoiceStopRequested) {
                console.log('–û–±—Ä–æ–±–∫—É —á–µ—Ä–≥–∏ –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è –∑—É–ø–∏–Ω–µ–Ω–æ –Ω–∞ –≤–∏–º–æ–≥—É –ø—ñ—Å–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞—É–¥—ñ–æ');
                voiceQueue = [];
                removeTTSIndicator();
                break;
            }
            
            if (!audioBlob) {
                console.error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞—É–¥—ñ–æ blob');
                showTTSIndicator('error', '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞—É–¥—ñ–æ');
                errorCount++;
                continue;
            }
            
            // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞ —Å—Ç–∞—Ç—É—Å –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è
            showTTSIndicator('playing');
            
            // –í—ñ–¥—Ç–≤–æ—Ä—é—î–º–æ –∞—É–¥—ñ–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –º–µ—Ç–æ–¥–∏ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ
            console.log('–ê—É–¥—ñ–æ –æ—Ç—Ä–∏–º–∞–Ω–æ, –ø–æ—á–∏–Ω–∞—î–º–æ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è...');
            
            // –ú–∞—Å–∏–≤ –º–µ—Ç–æ–¥—ñ–≤ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è, —è–∫—ñ –±—É–¥–µ–º–æ –ø—Ä–æ–±—É–≤–∞—Ç–∏ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ
            const playbackMethods = [
                { name: '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π', method: playAudio },
                { name: 'DOM', method: playAudioViaDom },
                { name: 'URL', method: playAudioViaURL }
            ];
            
            let played = false;
            let lastError = null;
            
            // –ü—Ä–æ–±—É—î–º–æ –∫–æ–∂–µ–Ω –º–µ—Ç–æ–¥ –ø–æ —á–µ—Ä–∑—ñ
            for (const method of playbackMethods) {
                if (played) break;
                
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –∑–∞–ø–∏—Ç–∞–Ω–æ –ø—Ä–∏–ø–∏–Ω–µ–Ω–Ω—è –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è
                if (isVoiceStopRequested) {
                    console.log(`–í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è —á–µ—Ä–µ–∑ ${method.name} –º–µ—Ç–æ–¥ —Å–∫–∞—Å–æ–≤–∞–Ω–æ –Ω–∞ –≤–∏–º–æ–≥—É`);
                    voiceQueue = [];
                    removeTTSIndicator();
                    break;
                }
                
                try {
                    console.log(`–°–ø—Ä–æ–±–∞ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è —á–µ—Ä–µ–∑ ${method.name} –º–µ—Ç–æ–¥...`);
                    await method.method(audioBlob);
                    console.log(`–í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è —á–µ—Ä–µ–∑ ${method.name} –º–µ—Ç–æ–¥ —É—Å–ø—ñ—à–Ω–æ`);
                    played = true;
                    break;
                } catch (playError) {
                    console.warn(`–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è —á–µ—Ä–µ–∑ ${method.name} –º–µ—Ç–æ–¥:`, playError);
                    lastError = playError;
                }
            }
            
            if (!played && !isVoiceStopRequested) {
                console.error('–£—Å—ñ –º–µ—Ç–æ–¥–∏ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞—É–¥—ñ–æ –∑–∞–∑–Ω–∞–ª–∏ –Ω–µ–≤–¥–∞—á—ñ');
                showTTSIndicator('error', 'Error playing audio');
                throw lastError || new Error('Error playing audio');
            }
            
            console.log('–í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
            removeTTSIndicator();
            
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∞–±–æ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è:', error);
            showTTSIndicator('error', 'Error generating or playing audio');
            errorCount++;
            
            // –Ø–∫—â–æ –∑–∞–±–∞–≥–∞—Ç–æ –ø–æ–º–∏–ª–æ–∫ –ø—ñ–¥—Ä—è–¥, –æ—á–∏—â–∞—î–º–æ —á–µ—Ä–≥—É
            if (errorCount >= 3) {
                console.error('–ó–∞–±–∞–≥–∞—Ç–æ –ø–æ–º–∏–ª–æ–∫, –æ—á–∏—â–∞—î–º–æ —á–µ—Ä–≥—É –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è');
                voiceQueue = [];
                break;
            }
        }
    }
    
    // –°–∫–∏–¥–∞—î–º–æ –ø—Ä–∞–ø–æ—Ä–µ—Ü—å –ø—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏ –≤—Å—ñ—î—ó —á–µ—Ä–≥–∏
    isGeneratingVoice = false;
    isVoiceStopRequested = false; // –°–∫–∏–¥–∞—î–º–æ —Ñ–ª–∞–≥ –∑—É–ø–∏–Ω–∫–∏
    console.log(`–û–±—Ä–æ–±–∫–∞ —á–µ—Ä–≥–∏ –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–æ–±–ª–µ–Ω–æ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤: ${processedCount}, –ø–æ–º–∏–ª–æ–∫: ${errorCount}`);
}

/**
 * –û—Ç—Ä–∏–º—É—î –∞—É–¥—ñ–æ –∑ Gemini API
 * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è
 * @param {string} voice - –ì–æ–ª–æ—Å –¥–ª—è –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è
 * @param {string} instructions - –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è
 * @returns {Promise<Blob>} - Blob –∑ –∞—É–¥—ñ–æ
 */
async function fetchGeminiVoiceAudio(text, voice, instructions) {
    try {
        // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π AbortController –¥–ª—è —Ü—å–æ–≥–æ –∑–∞–ø–∏—Ç—É
        currentTTSAbortController = new AbortController();
        const signal = currentTTSAbortController.signal;
        
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ API –∫–ª—é—á –∑ gameState
        const apiKey = gameState.apiKey;
        console.log(`–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ Gemini API: ${text.substring(0, 50)}... (–≥–æ–ª–æ—Å: ${voice})`);
        
        // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç—É –∑ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è–º–∏
        let promptText = '';
        if (instructions && instructions.trim() !== '') {
            promptText = `${instructions}\n${text}`;
        } else {
            promptText = `Read aloud in a warm, engaging tone\n${text}`;
        }
        
        // –í–∏–±—ñ—Ä –¥—Ä—É–≥–æ–≥–æ –≥–æ–ª–æ—Å—É (Gemini API –≤–∏–º–∞–≥–∞—î —Å–∞–º–µ 2 –≥–æ–ª–æ—Å–∏)
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ–Ω—à–∏–π –≥–æ–ª–æ—Å, –Ω—ñ–∂ –æ—Å–Ω–æ–≤–Ω–∏–π
        const secondVoice = voice === "Zephyr" ? "Fenrir" : "Zephyr";
        
        // –§–æ—Ä–º—É—î–º–æ –∑–∞–ø–∏—Ç –¥–æ API
        const requestBody = {
            contents: [
                {
                    role: "user",
                    parts: [
                        {
                            text: promptText
                        }
                    ]
                }
            ],
            generationConfig: {
                responseModalities: ["audio"],
                temperature: 1,
                speechConfig: {
                    multiSpeakerVoiceConfig: {
                        speakerVoiceConfigs: [
                            {
                                speaker: "Speaker 1", // –û—Å–Ω–æ–≤–Ω–∏–π –≥–æ–ª–æ—Å (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è)
                                voiceConfig: {
                                    prebuiltVoiceConfig: {
                                        voiceName: voice
                                    }
                                }
                            },
                            {
                                speaker: "Speaker 2", // –î—Ä—É–≥–∏–π –≥–æ–ª–æ—Å (–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è, –∞–ª–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω –¥–ª—è API)
                                voiceConfig: {
                                    prebuiltVoiceConfig: {
                                        voiceName: secondVoice
                                    }
                                }
                            }
                        ]
                    }
                }
            }
        };
        
        // –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        console.log('TTS –∑–∞–ø–∏—Ç:', JSON.stringify(requestBody, null, 2));
        
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ non-streaming API endpoint –∑–∞–º—ñ—Å—Ç—å streaming
        const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-tts:generateContent?key=${apiKey}`;
        console.log('TTS API URL:', apiUrl.replace(apiKey, '****'));
        
        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –∑ —Å–∏–≥–Ω–∞–ª–æ–º AbortController
        console.log('–í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –¥–æ TTS API...');
        const response = await fetch(apiUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(requestBody),
            signal: signal
        });
        
        console.log('TTS –≤—ñ–¥–ø–æ–≤—ñ–¥—å —Å—Ç–∞—Ç—É—Å:', response.status, response.statusText);
        
        if (!response.ok) {
            const errorText = await response.text();
            console.error('TTS –ø–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:', errorText);
            throw new Error(`–ü–æ–º–∏–ª–∫–∞ API: ${response.status} ${response.statusText} ${errorText}`);
        }
        
        // –û—Ç—Ä–∏–º—É—î–º–æ JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑–∞–º—ñ—Å—Ç—å –ø–æ—Ç–æ–∫–æ–≤–æ—ó –æ–±—Ä–æ–±–∫–∏
        const data = await response.json();
        console.log('TTS –æ—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å:', JSON.stringify(data, null, 2).substring(0, 200) + '...');
        
        // –û—á–∏—â–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π AbortController –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
        currentTTSAbortController = null;
        
        let audioData = null;
        let mimeType = 'audio/wav'; // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        
        // –®—É–∫–∞—î–º–æ –∞—É–¥—ñ–æ –¥–∞–Ω—ñ –≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        if (data.candidates && 
            data.candidates[0] && 
            data.candidates[0].content && 
            data.candidates[0].content.parts) {
            
            const parts = data.candidates[0].content.parts;
            console.log('–ö—ñ–ª—å–∫—ñ—Å—Ç—å —á–∞—Å—Ç–∏–Ω —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:', parts.length);
            
            for (let i = 0; i < parts.length; i++) {
                const part = parts[i];
                console.log(`–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∞—Å—Ç–∏–Ω–∏ ${i}:`, part);
                
                if (part.inlineData && part.inlineData.mimeType && part.inlineData.mimeType.includes('audio/')) {
                    // –ó–Ω–∞–π–¥–µ–Ω–æ –∞—É–¥—ñ–æ –¥–∞–Ω—ñ
                    console.log('TTS –∑–Ω–∞–π–¥–µ–Ω–æ –∞—É–¥—ñ–æ –¥–∞–Ω—ñ, —Ç–∏–ø:', part.inlineData.mimeType);
                    let base64Data = part.inlineData.data;
                    mimeType = part.inlineData.mimeType;
                    
                    // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π MIME —Ç–∏–ø –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π
                    if (mimeType.includes('audio/L16') || mimeType.includes('pcm')) {
                        console.log('–í–∏—è–≤–ª–µ–Ω–æ PCM —Ñ–æ—Ä–º–∞—Ç, –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ WAV...');
                        
                        try {
                            // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ PCM –¥–∞–Ω—ñ –≤ WAV —Ñ–æ—Ä–º–∞—Ç
                            // –í–∏–∑–Ω–∞—á–∞—î–º–æ —á–∞—Å—Ç–æ—Ç—É –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü—ñ—ó –∑ MIME —Ç–∏–ø—É, —è–∫—â–æ –º–æ–∂–ª–∏–≤–æ
                            let sampleRate = 24000; // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
                            const sampleRateMatch = mimeType.match(/rate=(\d+)/);
                            if (sampleRateMatch && sampleRateMatch[1]) {
                                sampleRate = parseInt(sampleRateMatch[1]);
                            }
                            
                            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ base64 –¥–∞–Ω—ñ –Ω–µ –ø–æ—à–∫–æ–¥–∂–µ–Ω—ñ
                            let cleanedBase64 = base64Data;
                            if (base64Data.includes(' ') || base64Data.includes('\n')) {
                                console.warn('Base64 –¥–∞–Ω—ñ –º—ñ—Å—Ç—è—Ç—å –ø—Ä–æ–±—ñ–ª–∏ –∞–±–æ –ø–µ—Ä–µ–Ω–æ—Å–∏ —Ä—è–¥–∫—ñ–≤, –æ—á–∏—â–∞—î–º–æ...');
                                cleanedBase64 = base64Data.replace(/[\s\n]/g, '');
                                console.log('–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞:', base64Data.length, '–û—á–∏—â–µ–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞:', cleanedBase64.length);
                            }
                            
                            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É –¥–æ–≤–∂–∏–Ω—É base64 –¥–∞–Ω–∏—Ö
                            if (cleanedBase64.length < 10) {
                                console.error('Base64 –¥–∞–Ω—ñ –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫—ñ:', cleanedBase64);
                                throw new Error('–û—Ç—Ä–∏–º–∞–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –∞—É–¥—ñ–æ –¥–∞–Ω—ñ (–∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫—ñ)');
                            }
                            
                            // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ base64 —É –±—ñ–Ω–∞—Ä–Ω—ñ –¥–∞–Ω—ñ
                            const binaryData = atob(cleanedBase64);
                            const bytes = new Uint8Array(binaryData.length);
                            for (let j = 0; j < binaryData.length; j++) {
                                bytes[j] = binaryData.charCodeAt(j);
                            }
                            
                            // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ PCM –≤ WAV
                            audioData = pcmToWav(bytes, sampleRate);
                            console.log('PCM —É—Å–ø—ñ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–æ –≤ WAV, —Ä–æ–∑–º—ñ—Ä:', audioData.size);
                            return audioData;
                        } catch (conversionError) {
                            console.error('–ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó PCM –≤ WAV:', conversionError);
                            // –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∑—ñ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ—é –æ–±—Ä–æ–±–∫–æ—é, —è–∫—â–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –Ω–µ –≤–¥–∞–ª–∞—Å—è
                        }
                        
                        // –Ø–∫—â–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –Ω–µ –≤–¥–∞–ª–∞—Å—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π WAV MIME —Ç–∏–ø
                        mimeType = 'audio/wav';
                    }
                    
                    if (!base64Data) {
                        console.error('–í—ñ–¥—Å—É—Ç–Ω—ñ base64 –¥–∞–Ω—ñ –≤ —á–∞—Å—Ç–∏–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ');
                        continue;
                    }
                    
                    try {
                        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ base64 –¥–∞–Ω—ñ –Ω–µ –ø–æ—à–∫–æ–¥–∂–µ–Ω—ñ
                        let cleanedBase64 = base64Data;
                        if (base64Data.includes(' ') || base64Data.includes('\n')) {
                            console.warn('Base64 –¥–∞–Ω—ñ –º—ñ—Å—Ç—è—Ç—å –ø—Ä–æ–±—ñ–ª–∏ –∞–±–æ –ø–µ—Ä–µ–Ω–æ—Å–∏ —Ä—è–¥–∫—ñ–≤, –æ—á–∏—â–∞—î–º–æ...');
                            cleanedBase64 = base64Data.replace(/[\s\n]/g, '');
                            console.log('–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞:', base64Data.length, '–û—á–∏—â–µ–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞:', cleanedBase64.length);
                        }
                        
                        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É –¥–æ–≤–∂–∏–Ω—É base64 –¥–∞–Ω–∏—Ö
                        if (cleanedBase64.length < 10) {
                            console.error('Base64 –¥–∞–Ω—ñ –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫—ñ:', cleanedBase64);
                            throw new Error('–û—Ç—Ä–∏–º–∞–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –∞—É–¥—ñ–æ –¥–∞–Ω—ñ (–∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫—ñ)');
                        }
                        
                        // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ base64 —É blob
                        const binaryData = atob(cleanedBase64);
                        const bytes = new Uint8Array(binaryData.length);
                        for (let j = 0; j < binaryData.length; j++) {
                            bytes[j] = binaryData.charCodeAt(j);
                        }
                        
                        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–æ–∑–º—ñ—Ä –±—ñ–Ω–∞—Ä–Ω–∏—Ö –¥–∞–Ω–∏—Ö
                        if (bytes.length < 100) {
                            console.warn('–ê—É–¥—ñ–æ –¥–∞–Ω—ñ –¥—É–∂–µ –º–∞–ª—ñ, –º–æ–∂–ª–∏–≤–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ:', bytes.length, '–±–∞–π—Ç');
                        }
                        
                        // –°—Ç–≤–æ—Ä—é—î–º–æ Blob –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º MIME —Ç–∏–ø–æ–º
                        audioData = new Blob([bytes], { type: mimeType });
                        console.log('TTS —Å—Ç–≤–æ—Ä–µ–Ω–æ –∞—É–¥—ñ–æ Blob, —Ä–æ–∑–º—ñ—Ä:', audioData.size);
                        break;
                    } catch (conversionError) {
                        console.error('–ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó base64 –≤ blob:', conversionError);
                        throw new Error(`–ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –∞—É–¥—ñ–æ –¥–∞–Ω–∏—Ö: ${conversionError.message}`);
                    }
                }
            }
        } else {
            // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –º–µ—Ç–æ–¥ –ø–æ—à—É–∫—É –∞—É–¥—ñ–æ –¥–∞–Ω–∏—Ö, —è–∫—â–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î
            console.warn('–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞, —Å–ø—Ä–æ–±—É—î–º–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –º–µ—Ç–æ–¥ –ø–æ—à—É–∫—É –∞—É–¥—ñ–æ...');
            
            // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤ —Ä—è–¥–æ–∫ –¥–ª—è –ø–æ—à—É–∫—É
            const responseStr = JSON.stringify(data);
            
            // –®—É–∫–∞—î–º–æ –ø–∞—Ç–µ—Ä–Ω–∏, —è–∫—ñ –º–æ–∂—É—Ç—å –≤–∫–∞–∑—É–≤–∞—Ç–∏ –Ω–∞ –∞—É–¥—ñ–æ –¥–∞–Ω—ñ
            const audioDataMatches = responseStr.match(/"mimeType"\s*:\s*"audio\/[^"]+"\s*,\s*"data"\s*:\s*"([^"]+)"/);
            if (audioDataMatches && audioDataMatches[1]) {
                console.log('–ó–Ω–∞–π–¥–µ–Ω–æ –∞—É–¥—ñ–æ –¥–∞–Ω—ñ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ—Ç–æ–¥—É');
                let base64Data = audioDataMatches[1];
                const mimeTypeMatches = responseStr.match(/"mimeType"\s*:\s*"(audio\/[^"]+)"/);
                mimeType = mimeTypeMatches && mimeTypeMatches[1] ? mimeTypeMatches[1] : 'audio/wav';
                
                // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π MIME —Ç–∏–ø –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π
                if (mimeType.includes('audio/L16') || mimeType.includes('pcm')) {
                    console.log('–í–∏—è–≤–ª–µ–Ω–æ PCM —Ñ–æ—Ä–º–∞—Ç, –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ WAV...');
                    
                    try {
                        // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ PCM –¥–∞–Ω—ñ –≤ WAV —Ñ–æ—Ä–º–∞—Ç
                        // –í–∏–∑–Ω–∞—á–∞—î–º–æ —á–∞—Å—Ç–æ—Ç—É –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü—ñ—ó –∑ MIME —Ç–∏–ø—É, —è–∫—â–æ –º–æ–∂–ª–∏–≤–æ
                        let sampleRate = 24000; // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
                        const sampleRateMatch = mimeType.match(/rate=(\d+)/);
                        if (sampleRateMatch && sampleRateMatch[1]) {
                            sampleRate = parseInt(sampleRateMatch[1]);
                        }
                        
                        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ base64 –¥–∞–Ω—ñ –Ω–µ –ø–æ—à–∫–æ–¥–∂–µ–Ω—ñ
                        let cleanedBase64 = base64Data;
                        if (base64Data.includes(' ') || base64Data.includes('\n')) {
                            console.warn('Base64 –¥–∞–Ω—ñ –º—ñ—Å—Ç—è—Ç—å –ø—Ä–æ–±—ñ–ª–∏ –∞–±–æ –ø–µ—Ä–µ–Ω–æ—Å–∏ —Ä—è–¥–∫—ñ–≤, –æ—á–∏—â–∞—î–º–æ...');
                            cleanedBase64 = base64Data.replace(/[\s\n]/g, '');
                            console.log('–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞:', base64Data.length, '–û—á–∏—â–µ–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞:', cleanedBase64.length);
                        }
                        
                        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É –¥–æ–≤–∂–∏–Ω—É base64 –¥–∞–Ω–∏—Ö
                        if (cleanedBase64.length < 10) {
                            console.error('Base64 –¥–∞–Ω—ñ –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫—ñ:', cleanedBase64);
                            throw new Error('–û—Ç—Ä–∏–º–∞–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –∞—É–¥—ñ–æ –¥–∞–Ω—ñ (–∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫—ñ)');
                        }
                        
                        // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ base64 —É –±—ñ–Ω–∞—Ä–Ω—ñ –¥–∞–Ω—ñ
                        const binaryData = atob(cleanedBase64);
                        const bytes = new Uint8Array(binaryData.length);
                        for (let j = 0; j < binaryData.length; j++) {
                            bytes[j] = binaryData.charCodeAt(j);
                        }
                        
                        // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ PCM –≤ WAV
                        audioData = pcmToWav(bytes, sampleRate);
                        console.log('PCM —É—Å–ø—ñ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–æ –≤ WAV, —Ä–æ–∑–º—ñ—Ä:', audioData.size);
                        return audioData;
                    } catch (conversionError) {
                        console.error('–ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó PCM –≤ WAV:', conversionError);
                        // –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∑—ñ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ—é –æ–±—Ä–æ–±–∫–æ—é, —è–∫—â–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –Ω–µ –≤–¥–∞–ª–∞—Å—è
                    }
                    
                    // –Ø–∫—â–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –Ω–µ –≤–¥–∞–ª–∞—Å—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π WAV MIME —Ç–∏–ø
                    mimeType = 'audio/wav';
                }
                
                try {
                    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ base64 –¥–∞–Ω—ñ –Ω–µ –ø–æ—à–∫–æ–¥–∂–µ–Ω—ñ
                    let cleanedBase64 = base64Data;
                    if (base64Data.includes(' ') || base64Data.includes('\n')) {
                        console.warn('Base64 –¥–∞–Ω—ñ –º—ñ—Å—Ç—è—Ç—å –ø—Ä–æ–±—ñ–ª–∏ –∞–±–æ –ø–µ—Ä–µ–Ω–æ—Å–∏ —Ä—è–¥–∫—ñ–≤, –æ—á–∏—â–∞—î–º–æ...');
                        cleanedBase64 = base64Data.replace(/[\s\n]/g, '');
                        console.log('–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞:', base64Data.length, '–û—á–∏—â–µ–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞:', cleanedBase64.length);
                    }
                    
                    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É –¥–æ–≤–∂–∏–Ω—É base64 –¥–∞–Ω–∏—Ö
                    if (cleanedBase64.length < 10) {
                        console.error('Base64 –¥–∞–Ω—ñ –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫—ñ:', cleanedBase64);
                        throw new Error('–û—Ç—Ä–∏–º–∞–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –∞—É–¥—ñ–æ –¥–∞–Ω—ñ (–∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫—ñ)');
                    }
                    
                    // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ base64 —É blob
                    const binaryData = atob(cleanedBase64);
                    const bytes = new Uint8Array(binaryData.length);
                    for (let j = 0; j < binaryData.length; j++) {
                        bytes[j] = binaryData.charCodeAt(j);
                    }
                    
                    audioData = new Blob([bytes], { type: mimeType });
                    console.log('TTS —Å—Ç–≤–æ—Ä–µ–Ω–æ –∞—É–¥—ñ–æ Blob —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –º–µ—Ç–æ–¥, —Ä–æ–∑–º—ñ—Ä:', audioData.size);
                } catch (conversionError) {
                    console.error('–ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó base64 –≤ blob (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –º–µ—Ç–æ–¥):', conversionError);
                }
            } else {
                console.error('–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:', data);
                throw new Error('–ê—É–¥—ñ–æ –¥–∞–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ API');
            }
        }
        
        if (!audioData) {
            console.error('TTS –∞—É–¥—ñ–æ –¥–∞–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ');
            throw new Error('–ê—É–¥—ñ–æ –¥–∞–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ API');
        }
        
        // –°–ø—Ä–æ–±—É—î–º–æ –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ –∞—É–¥—ñ–æ –≤ MP3 —Ñ–æ—Ä–º–∞—Ç, —è–∫–∏–π –∫—Ä–∞—â–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –±—Ä–∞—É–∑–µ—Ä–∞–º–∏
        try {
            // –°—Ç–≤–æ—Ä—é—î–º–æ –∞—É–¥—ñ–æ –µ–ª–µ–º–µ–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ —Ñ–æ—Ä–º–∞—Ç—É
            const testAudio = document.createElement('audio');
            const canPlayType = testAudio.canPlayType(audioData.type);
            
            console.log(`–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ —Ñ–æ—Ä–º–∞—Ç—É ${audioData.type}: ${canPlayType}`);
            
            if (canPlayType === '' || canPlayType === 'maybe') {
                console.warn(`–§–æ—Ä–º–∞—Ç ${audioData.type} –º–æ–∂–µ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏—Å—è, —Å–ø—Ä–æ–±—É—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ MP3`);
                // –¢—É—Ç –º–æ–∂–Ω–∞ –±—É–ª–æ –± –¥–æ–¥–∞—Ç–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—é –≤ MP3, –∞–ª–µ —Ü–µ –ø–æ—Ç—Ä–µ–±—É—î –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –±—ñ–±–ª—ñ–æ—Ç–µ–∫
                // –ù–∞—Ä–∞–∑—ñ –ø—Ä–æ—Å—Ç–æ –∑–º—ñ–Ω–∏–º–æ MIME —Ç–∏–ø –Ω–∞ –±—ñ–ª—å—à —Å—É–º—ñ—Å–Ω–∏–π
                audioData = new Blob([audioData], { type: 'audio/mpeg' });
            }
        } catch (e) {
            console.warn('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –∞—É–¥—ñ–æ —Ñ–æ—Ä–º–∞—Ç—É:', e);
        }
        
        return audioData;
    } catch (error) {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–∞–ø–∏—Ç –±—É–≤ —Å–∫–∞—Å–æ–≤–∞–Ω–∏–π
        if (error.name === 'AbortError') {
            console.log('–ó–∞–ø–∏—Ç TTS –±—É–≤ —Å–∫–∞—Å–æ–≤–∞–Ω–∏–π');
            throw new Error('–ó–∞–ø–∏—Ç TTS –±—É–≤ —Å–∫–∞—Å–æ–≤–∞–Ω–∏–π');
        }
        
        console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞—É–¥—ñ–æ –∑ Gemini API:', error);
        throw error;
    } finally {
        // –í –±—É–¥—å-—è–∫–æ–º—É –≤–∏–ø–∞–¥–∫—É –æ—á–∏—â–∞—î–º–æ AbortController
        if (currentTTSAbortController) {
            // –Ø–∫—â–æ —Ü–µ —Ç–æ–π —Å–∞–º–∏–π –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä, —è–∫–∏–π –º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–ª–∏ –¥–ª—è —Ü—å–æ–≥–æ –∑–∞–ø–∏—Ç—É
            currentTTSAbortController = null;
        }
    }
}

/**
 * –í—Å—Ç–∞–Ω–æ–≤–ª—é—î —à–≤–∏–¥–∫—ñ—Å—Ç—å –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞—É–¥—ñ–æ
 * @param {number} rate - –®–≤–∏–¥–∫—ñ—Å—Ç—å –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è (–≤—ñ–¥ 0.5 –¥–æ 3.0)
 */
function setPlaybackRate(rate) {
    // –û–±–º–µ–∂–µ–Ω–Ω—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º—É –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ
    const normalizedRate = Math.max(0.5, Math.min(3.0, rate));
    
    console.log(`–ó–º—ñ–Ω–∞ —à–≤–∏–¥–∫–æ—Å—Ç—ñ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–∞ ${normalizedRate}x`);
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–æ–≤—É —à–≤–∏–¥–∫—ñ—Å—Ç—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ
    voiceContext.playbackRate = normalizedRate;
    
    // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —à–≤–∏–¥–∫—ñ—Å—Ç—å –¥–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∞—É–¥—ñ–æ, —è–∫—â–æ –≤–æ–Ω–æ –≤—ñ–¥—Ç–≤–æ—Ä—é—î—Ç—å—Å—è
    if (currentlyPlaying) {
        currentlyPlaying.playbackRate = normalizedRate;
    }
    
    // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è
    if (document.getElementById('tts-status-indicator')) {
        showTTSIndicator('playing');
    }
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    saveVoiceSettings();
}

/**
 * –í—ñ–¥—Ç–≤–æ—Ä—é—î –∞—É–¥—ñ–æ
 * @param {Blob} audioBlob - Blob –∑ –∞—É–¥—ñ–æ
 * @returns {Promise<void>}
 */
function playAudio(audioBlob) {
    return new Promise((resolve, reject) => {
        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –æ—Ç—Ä–∏–º–∞–ª–∏ –∫–æ—Ä–µ–∫—Ç–Ω–∏–π Blob
            if (!audioBlob || !(audioBlob instanceof Blob)) {
                throw new Error(`–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –∞—É–¥—ñ–æ blob: ${audioBlob}`);
            }
            
            console.log('–°—Ç–≤–æ—Ä—é—î–º–æ –∞—É–¥—ñ–æ –∑ blob —Ä–æ–∑–º—ñ—Ä–æ–º:', audioBlob.size, '–±–∞–π—Ç, —Ç–∏–ø:', audioBlob.type);
            
            // –°—Ç–≤–æ—Ä—é—î–º–æ URL –¥–ª—è blob
            const audioUrl = URL.createObjectURL(audioBlob);
            
            // –°—Ç–≤–æ—Ä—é—î–º–æ –∞—É–¥—ñ–æ –µ–ª–µ–º–µ–Ω—Ç
            const audioElement = new Audio(audioUrl);
            audioElement.volume = voiceContext.volume;
            audioElement.playbackRate = voiceContext.playbackRate; // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —à–≤–∏–¥–∫—ñ—Å—Ç—å –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è
            
            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–æ—Ç–æ—á–Ω–∏–π –∞—É–¥—ñ–æ –µ–ª–µ–º–µ–Ω—Ç
            currentlyPlaying = audioElement;
            
            // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
            audioElement.onended = () => {
                // –ó–≤—ñ–ª—å–Ω—è—î–º–æ —Ä–µ—Å—É—Ä—Å–∏
                URL.revokeObjectURL(audioUrl);
                currentlyPlaying = null;
                resolve();
            };
            
            audioElement.onerror = (error) => {
                const errorCode = audioElement.error ? audioElement.error.code : '–Ω–µ–≤—ñ–¥–æ–º–æ';
                const errorMessage = audioElement.error ? audioElement.error.message : '–Ω–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞';
                console.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞—É–¥—ñ–æ:', errorCode, errorMessage);
                URL.revokeObjectURL(audioUrl);
                currentlyPlaying = null;
                reject(new Error(`–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞—É–¥—ñ–æ: –∫–æ–¥ ${errorCode}, ${errorMessage}`));
            };
            
            // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤—ñ–¥–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
            audioElement.oncanplaythrough = () => {
                console.log('–ê—É–¥—ñ–æ –≥–æ—Ç–æ–≤–µ –¥–æ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è');
            };
            
            // –ü–æ—á–∏–Ω–∞—î–º–æ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è
            console.log('–°–ø—Ä–æ–±–∞ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞—É–¥—ñ–æ...');
            audioElement.play().then(() => {
                console.log('–í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞—É–¥—ñ–æ —É—Å–ø—ñ—à–Ω–æ —Ä–æ–∑–ø–æ—á–∞—Ç–æ');
            }).catch((error) => {
                console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è:', error);
                URL.revokeObjectURL(audioUrl);
                currentlyPlaying = null;
                reject(new Error(`–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ—á–∞—Ç–∏ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞—É–¥—ñ–æ: ${error.message}`));
            });
        } catch (error) {
            console.error('–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—ñ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞—É–¥—ñ–æ:', error);
            currentlyPlaying = null;
            reject(new Error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—ñ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞—É–¥—ñ–æ: ${error.message}`));
        }
    });
}

/**
 * –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –º–µ—Ç–æ–¥ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞—É–¥—ñ–æ —á–µ—Ä–µ–∑ DOM
 * @param {Blob} audioBlob - Blob –∑ –∞—É–¥—ñ–æ
 * @returns {Promise<void>}
 */
function playAudioViaDom(audioBlob) {
    return new Promise((resolve, reject) => {
        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –æ—Ç—Ä–∏–º–∞–ª–∏ –∫–æ—Ä–µ–∫—Ç–Ω–∏–π Blob
            if (!audioBlob || !(audioBlob instanceof Blob)) {
                throw new Error(`–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –∞—É–¥—ñ–æ blob: ${audioBlob}`);
            }
            
            console.log('–°—Ç–≤–æ—Ä—é—î–º–æ DOM –∞—É–¥—ñ–æ –∑ blob —Ä–æ–∑–º—ñ—Ä–æ–º:', audioBlob.size, '–±–∞–π—Ç, —Ç–∏–ø:', audioBlob.type);
            
            // –°—Ç–≤–æ—Ä—é—î–º–æ URL –¥–ª—è blob
            const audioUrl = URL.createObjectURL(audioBlob);
            
            // –°—Ç–≤–æ—Ä—é—î–º–æ –∞—É–¥—ñ–æ –µ–ª–µ–º–µ–Ω—Ç —ñ –¥–æ–¥–∞—î–º–æ –π–æ–≥–æ –¥–æ DOM
            const audioElement = document.createElement('audio');
            audioElement.style.display = 'none';
            audioElement.src = audioUrl;
            audioElement.volume = voiceContext.volume;
            audioElement.playbackRate = voiceContext.playbackRate; // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —à–≤–∏–¥–∫—ñ—Å—Ç—å –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è
            document.body.appendChild(audioElement);
            
            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–æ—Ç–æ—á–Ω–∏–π –∞—É–¥—ñ–æ –µ–ª–µ–º–µ–Ω—Ç
            currentlyPlaying = audioElement;
            
            // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
            audioElement.onended = () => {
                // –í–∏–¥–∞–ª—è—î–º–æ –µ–ª–µ–º–µ–Ω—Ç –∑ DOM
                document.body.removeChild(audioElement);
                URL.revokeObjectURL(audioUrl);
                currentlyPlaying = null;
                resolve();
            };
            
            audioElement.onerror = (error) => {
                const errorCode = audioElement.error ? audioElement.error.code : '–Ω–µ–≤—ñ–¥–æ–º–æ';
                const errorMessage = audioElement.error ? audioElement.error.message : '–Ω–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞';
                console.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è DOM –∞—É–¥—ñ–æ:', errorCode, errorMessage);
                
                if (document.body.contains(audioElement)) {
                    document.body.removeChild(audioElement);
                }
                URL.revokeObjectURL(audioUrl);
                currentlyPlaying = null;
                reject(new Error(`–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è DOM –∞—É–¥—ñ–æ: –∫–æ–¥ ${errorCode}, ${errorMessage}`));
            };
            
            // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤—ñ–¥–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
            audioElement.oncanplaythrough = () => {
                console.log('DOM –∞—É–¥—ñ–æ –≥–æ—Ç–æ–≤–µ –¥–æ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è');
            };
            
            // –ü–æ—á–∏–Ω–∞—î–º–æ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è
            console.log('–°–ø—Ä–æ–±–∞ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è DOM –∞—É–¥—ñ–æ...');
            audioElement.play().then(() => {
                console.log('–í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è DOM –∞—É–¥—ñ–æ —É—Å–ø—ñ—à–Ω–æ —Ä–æ–∑–ø–æ—á–∞—Ç–æ');
            }).catch((error) => {
                console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è DOM –∞—É–¥—ñ–æ:', error);
                
                if (document.body.contains(audioElement)) {
                    document.body.removeChild(audioElement);
                }
                URL.revokeObjectURL(audioUrl);
                currentlyPlaying = null;
                reject(new Error(`–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ—á–∞—Ç–∏ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è DOM –∞—É–¥—ñ–æ: ${error.message}`));
            });
        } catch (error) {
            console.error('–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—ñ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è DOM –∞—É–¥—ñ–æ:', error);
            currentlyPlaying = null;
            reject(new Error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—ñ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è DOM –∞—É–¥—ñ–æ: ${error.message}`));
        }
    });
}

/**
 * –°—Ç–≤–æ—Ä—é—î —Ç–∏–º—á–∞—Å–æ–≤–∏–π –∞—É–¥—ñ–æ —Ñ–∞–π–ª —Ç–∞ –≤—ñ–¥—Ç–≤–æ—Ä—é—î –π–æ–≥–æ —á–µ—Ä–µ–∑ URL
 * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —è–∫ –∑–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç, —è–∫—â–æ –ø—Ä—è–º—ñ –º–µ—Ç–æ–¥–∏ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–µ –ø—Ä–∞—Ü—é—é—Ç—å
 * @param {Blob} audioBlob - Blob –∑ –∞—É–¥—ñ–æ
 * @returns {Promise<void>}
 */
function playAudioViaURL(audioBlob) {
    return new Promise((resolve, reject) => {
        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –æ—Ç—Ä–∏–º–∞–ª–∏ –∫–æ—Ä–µ–∫—Ç–Ω–∏–π Blob
            if (!audioBlob || !(audioBlob instanceof Blob)) {
                throw new Error(`–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –∞—É–¥—ñ–æ blob: ${audioBlob}`);
            }
            
            console.log('–°—Ç–≤–æ—Ä—é—î–º–æ URL –∞—É–¥—ñ–æ –∑ blob —Ä–æ–∑–º—ñ—Ä–æ–º:', audioBlob.size, '–±–∞–π—Ç, —Ç–∏–ø:', audioBlob.type);
            
            // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π URL –¥–ª—è blob
            const audioUrl = URL.createObjectURL(audioBlob);
            
            // –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ URL –≤ –Ω–æ–≤–æ–º—É –≤—ñ–∫–Ω—ñ –∞–±–æ –≤–∫–ª–∞–¥—Ü—ñ
            console.log('–í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –∞—É–¥—ñ–æ URL:', audioUrl);
            
            // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π –µ–ª–µ–º–µ–Ω—Ç –¥–ª—è –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è
            const audioElement = document.createElement('audio');
            audioElement.style.display = 'none';
            audioElement.controls = true; // –î–æ–¥–∞—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏ –∫–µ—Ä—É–≤–∞–Ω–Ω—è
            audioElement.src = audioUrl;
            audioElement.volume = voiceContext.volume;
            audioElement.playbackRate = voiceContext.playbackRate; // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —à–≤–∏–¥–∫—ñ—Å—Ç—å –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è
            
            // –î–æ–¥–∞—î–º–æ –µ–ª–µ–º–µ–Ω—Ç –¥–æ DOM
            document.body.appendChild(audioElement);
            
            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–æ—Ç–æ—á–Ω–∏–π –∞—É–¥—ñ–æ –µ–ª–µ–º–µ–Ω—Ç
            currentlyPlaying = audioElement;
            
            // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
            audioElement.onended = () => {
                console.log('URL –∞—É–¥—ñ–æ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
                // –í–∏–¥–∞–ª—è—î–º–æ –µ–ª–µ–º–µ–Ω—Ç –∑ DOM
                if (document.body.contains(audioElement)) {
                    document.body.removeChild(audioElement);
                }
                URL.revokeObjectURL(audioUrl);
                currentlyPlaying = null;
                resolve();
            };
            
            audioElement.onerror = (error) => {
                console.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è URL –∞—É–¥—ñ–æ:', error);
                if (document.body.contains(audioElement)) {
                    document.body.removeChild(audioElement);
                }
                URL.revokeObjectURL(audioUrl);
                currentlyPlaying = null;
                reject(new Error(`–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è URL –∞—É–¥—ñ–æ: ${error.message || '–Ω–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'}`));
            };
            
            // –ü–æ—á–∏–Ω–∞—î–º–æ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è
            console.log('–°–ø—Ä–æ–±–∞ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è URL –∞—É–¥—ñ–æ...');
            audioElement.play().then(() => {
                console.log('–í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è URL –∞—É–¥—ñ–æ —É—Å–ø—ñ—à–Ω–æ —Ä–æ–∑–ø–æ—á–∞—Ç–æ');
            }).catch((error) => {
                console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è URL –∞—É–¥—ñ–æ:', error);
                
                // –Ø–∫—â–æ –∞–≤—Ç–æ–≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–µ –ø—Ä–∞—Ü—é—î, –ø–æ–∫–∞–∑—É—î–º–æ –µ–ª–µ–º–µ–Ω—Ç –∫–µ—Ä—É–≤–∞–Ω–Ω—è
                console.log('–ê–≤—Ç–æ–≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–µ –ø—Ä–∞—Ü—é—î, –ø–æ–∫–∞–∑—É—î–º–æ –µ–ª–µ–º–µ–Ω—Ç –∫–µ—Ä—É–≤–∞–Ω–Ω—è');
                audioElement.style.display = 'block';
                audioElement.style.position = 'fixed';
                audioElement.style.bottom = '10px';
                audioElement.style.right = '10px';
                audioElement.style.zIndex = '9999';
                
                // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä–∏—Ç—Ç—è
                const closeButton = document.createElement('button');
                closeButton.textContent = '√ó';
                closeButton.style.position = 'absolute';
                closeButton.style.top = '-15px';
                closeButton.style.right = '-15px';
                closeButton.style.background = 'red';
                closeButton.style.color = 'white';
                closeButton.style.border = 'none';
                closeButton.style.borderRadius = '50%';
                closeButton.style.width = '25px';
                closeButton.style.height = '25px';
                closeButton.style.cursor = 'pointer';
                closeButton.style.fontSize = '16px';
                closeButton.style.lineHeight = '1';
                closeButton.style.padding = '0';
                
                closeButton.onclick = () => {
                    if (document.body.contains(audioElement)) {
                        document.body.removeChild(audioElement);
                    }
                    URL.revokeObjectURL(audioUrl);
                    currentlyPlaying = null;
                    resolve();
                };
                
                // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∞—É–¥—ñ–æ —Ç–∞ –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä–∏—Ç—Ç—è
                const container = document.createElement('div');
                container.style.position = 'fixed';
                container.style.bottom = '10px';
                container.style.right = '10px';
                container.style.zIndex = '9999';
                container.appendChild(audioElement);
                container.appendChild(closeButton);
                
                document.body.appendChild(container);
                
                // –ù–µ –≤—ñ–¥—Ö–∏–ª—è—î–º–æ –ø—Ä–æ–º—ñ—Å, —â–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º—ñ–≥ –≤—Ä—É—á–Ω—É –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è
            });
        } catch (error) {
            console.error('–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—ñ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è URL –∞—É–¥—ñ–æ:', error);
            currentlyPlaying = null;
            reject(new Error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—ñ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è URL –∞—É–¥—ñ–æ: ${error.message}`));
        }
    });
}

/**
 * –ó—É–ø–∏–Ω—è—î –ø–æ—Ç–æ—á–Ω–µ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞—É–¥—ñ–æ
 */
function stopVoice() {
    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–∞–ø–æ—Ä–µ—Ü—å –¥–ª—è –∑—É–ø–∏–Ω–∫–∏ –æ–±—Ä–æ–±–∫–∏ —á–µ—Ä–≥–∏
    isVoiceStopRequested = true;
    
    // –°–∫–∞—Å–æ–≤—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –∑–∞–ø–∏—Ç TTS, —è–∫—â–æ –≤—ñ–Ω —ñ—Å–Ω—É—î
    if (currentTTSAbortController) {
        console.log('–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É TTS...');
        currentTTSAbortController.abort();
        currentTTSAbortController = null;
    }
    
    if (currentlyPlaying) {
        try {
            currentlyPlaying.pause();
            currentlyPlaying.currentTime = 0;
            
            // –Ø–∫—â–æ —Ü–µ DOM –µ–ª–µ–º–µ–Ω—Ç, –≤–∏–¥–∞–ª—è—î–º–æ –π–æ–≥–æ
            if (currentlyPlaying.parentElement) {
                currentlyPlaying.parentElement.removeChild(currentlyPlaying);
            }
            
            currentlyPlaying = null;
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—É–ø–∏–Ω—Ü—ñ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è:', error);
        }
    }
    
    // –û—á–∏—â–∞—î–º–æ —á–µ—Ä–≥—É
    voiceQueue = [];
    isGeneratingVoice = false;
    
    // –í–∏–¥–∞–ª—è—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä, —è–∫—â–æ –≤—ñ–Ω –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è
    removeTTSIndicator();
}

/**
 * –í—Å—Ç–∞–Ω–æ–≤–ª—é—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è
 * @param {Object} settings - –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
 * @param {boolean} settings.isEnabled - –ß–∏ —É–≤—ñ–º–∫–Ω–µ–Ω–æ –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è
 * @param {string} settings.voice - –ì–æ–ª–æ—Å –¥–ª—è –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è (Gemini)
 * @param {number} settings.volume - –ì—É—á–Ω—ñ—Å—Ç—å (0-1)
 * @param {number} settings.playbackRate - –®–≤–∏–¥–∫—ñ—Å—Ç—å –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è (0.5-3)
 * @param {string} settings.service - –°–µ—Ä–≤—ñ—Å –¥–ª—è –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è ('gemini' –∞–±–æ 'elevenlabs')
 * @param {string} settings.elevenLabsApiKey - API –∫–ª—é—á –¥–ª—è ElevenLabs
 * @param {string} settings.elevenLabsVoice - ID –≥–æ–ª–æ—Å—É –¥–ª—è ElevenLabs
 */
function setVoiceSettings(settings) {
    if (typeof settings !== 'object') return;
    
    // –û–Ω–æ–≤–ª—é—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    if (typeof settings.isEnabled === 'boolean') {
        voiceContext.isEnabled = settings.isEnabled;
    }
    
    // –û–Ω–æ–≤–ª—é—î–º–æ —Å–µ—Ä–≤—ñ—Å, —è–∫—â–æ –≤–∫–∞–∑–∞–Ω–æ
    if (typeof settings.service === 'string' && 
        (settings.service === 'gemini' || settings.service === 'elevenlabs')) {
        voiceContext.service = settings.service;
    }
    
    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è Gemini
    if (typeof settings.voice === 'string' && settings.voice.trim() !== '') {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —Ç–∞–∫–∏–π –≥–æ–ª–æ—Å —É —Å–ø–∏—Å–∫—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö
        if (AVAILABLE_VOICES.includes(settings.voice)) {
            voiceContext.voice = settings.voice;
        } else {
            console.warn(`–ì–æ–ª–æ—Å "${settings.voice}" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≥–æ–ª–æ—Å—ñ–≤ Gemini. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π: ${voiceContext.voice}`);
        }
    }
    
    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è ElevenLabs
    if (typeof settings.elevenLabsApiKey === 'string') {
        voiceContext.elevenLabsApiKey = settings.elevenLabsApiKey;
    }
    
    if (typeof settings.elevenLabsVoice === 'string' && settings.elevenLabsVoice.trim() !== '') {
        voiceContext.elevenLabsVoice = settings.elevenLabsVoice;
    }
    
    if (typeof settings.volume === 'number' && !isNaN(settings.volume)) {
        // –û–±–º–µ–∂—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –≤—ñ–¥ 0 –¥–æ 1
        voiceContext.volume = Math.max(0, Math.min(1, settings.volume));
    }
    
    if (typeof settings.playbackRate === 'number' && !isNaN(settings.playbackRate)) {
        // –û–±–º–µ–∂—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –≤—ñ–¥ 0.5 –¥–æ 3
        voiceContext.playbackRate = Math.max(0.5, Math.min(3, settings.playbackRate));
    }
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    saveVoiceSettings();
    
    console.log('–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è:', voiceContext);
}

/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è
 * @returns {Object} - –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è
 */
function getVoiceSettings() {
    return { ...voiceContext };
}

/**
 * –ó–±–µ—Ä—ñ–≥–∞—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è –≤ localStorage
 */
function saveVoiceSettings() {
    try {
        localStorage.setItem('dndVoiceSettings', JSON.stringify(voiceContext));
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è:', error);
    }
}

/**
 * –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è –∑ localStorage
 */
function loadVoiceSettings() {
    try {
        const savedSettings = localStorage.getItem('dndVoiceSettings');
        if (savedSettings) {
            const parsedSettings = JSON.parse(savedSettings);
            setVoiceSettings(parsedSettings);
        }
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è:', error);
    }
}

// –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
loadVoiceSettings();

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç—É—î PCM –∞—É–¥—ñ–æ –¥–∞–Ω—ñ –≤ WAV —Ñ–æ—Ä–º–∞—Ç
 * @param {Uint8Array} pcmData - PCM –∞—É–¥—ñ–æ –¥–∞–Ω—ñ
 * @param {number} sampleRate - –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü—ñ—ó (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 24000)
 * @param {number} numChannels - –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞–Ω–∞–ª—ñ–≤ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 1)
 * @returns {Blob} - Blob –∑ WAV –∞—É–¥—ñ–æ
 */
function pcmToWav(pcmData, sampleRate = 24000, numChannels = 1) {
    console.log('–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è PCM –≤ WAV, —Ä–æ–∑–º—ñ—Ä –¥–∞–Ω–∏—Ö:', pcmData.length);
    
    // –†–æ–∑–º—ñ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–∞ WAV
    const headerSize = 44;
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ –±—É—Ñ–µ—Ä –¥–ª—è WAV —Ñ–∞–π–ª—É
    const wavBuffer = new ArrayBuffer(headerSize + pcmData.length);
    const wavView = new DataView(wavBuffer);
    
    // –ó–∞–ø–æ–≤–Ω—é—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ WAV
    // "RIFF" chunk descriptor
    writeString(wavView, 0, 'RIFF');
    wavView.setUint32(4, 36 + pcmData.length, true); // –†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É - 8
    writeString(wavView, 8, 'WAVE');
    
    // "fmt " sub-chunk
    writeString(wavView, 12, 'fmt ');
    wavView.setUint32(16, 16, true); // –†–æ–∑–º—ñ—Ä fmt chunk
    wavView.setUint16(20, 1, true); // –ê—É–¥—ñ–æ —Ñ–æ—Ä–º–∞—Ç (1 = PCM)
    wavView.setUint16(22, numChannels, true); // –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞–Ω–∞–ª—ñ–≤
    wavView.setUint32(24, sampleRate, true); // –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü—ñ—ó
    wavView.setUint32(28, sampleRate * numChannels * 2, true); // –ë–∞–π—Ç –≤ —Å–µ–∫—É–Ω–¥—É
    wavView.setUint16(32, numChannels * 2, true); // –ë–∞–π—Ç –Ω–∞ —Å–µ–º–ø–ª
    wavView.setUint16(34, 16, true); // –ë—ñ—Ç –Ω–∞ —Å–µ–º–ø–ª
    
    // "data" sub-chunk
    writeString(wavView, 36, 'data');
    wavView.setUint32(40, pcmData.length, true); // –†–æ–∑–º—ñ—Ä –¥–∞–Ω–∏—Ö
    
    // –ö–æ–ø—ñ—é—î–º–æ PCM –¥–∞–Ω—ñ
    const wavBytes = new Uint8Array(wavBuffer);
    wavBytes.set(pcmData, headerSize);
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ Blob –∑ WAV –¥–∞–Ω–∏–º–∏
    return new Blob([wavBuffer], { type: 'audio/wav' });
    
    // –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø–∏—Å—É —Ä—è–¥–∫—ñ–≤
    function writeString(view, offset, string) {
        for (let i = 0; i < string.length; i++) {
            view.setUint8(offset + i, string.charCodeAt(i));
        }
    }
}

/**
 * –û—Ç—Ä–∏–º—É—î –∞—É–¥—ñ–æ –∑ ElevenLabs API
 * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è
 * @param {string} voice - ID –≥–æ–ª–æ—Å—É –¥–ª—è –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è
 * @param {string} instructions - –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è (–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –≤ ElevenLabs)
 * @returns {Promise<Blob>} - Blob –∑ –∞—É–¥—ñ–æ
 */
async function fetchElevenLabsVoiceAudio(text, voice, instructions) {
    try {
        // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π AbortController –¥–ª—è —Ü—å–æ–≥–æ –∑–∞–ø–∏—Ç—É
        currentTTSAbortController = new AbortController();
        const signal = currentTTSAbortController.signal;
        
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ API –∫–ª—é—á –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
        const apiKey = voiceContext.elevenLabsApiKey;
        if (!apiKey) {
            throw new Error('–í—ñ–¥—Å—É—Ç–Ω—ñ–π API –∫–ª—é—á ElevenLabs');
        }

        console.log(`–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ ElevenLabs API: ${text.substring(0, 50)}... (–≥–æ–ª–æ—Å: ${voice})`);
        
        // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è –∑–∞–ø–∏—Ç—É
        const payload = {
            text: text,
            model_id: "eleven_multilingual_v2"
        };
        
        // –Ø–∫—â–æ voice –Ω–µ —î ID, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ EXAVITQu4vr4xnSDxMaL (Rachel) –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        const voiceId = voice && voice.length > 10 ? voice : "EXAVITQu4vr4xnSDxMaL";
        
        // –§–æ—Ä–º—É—î–º–æ URL –¥–ª—è –∑–∞–ø–∏—Ç—É
        const apiUrl = `https://api.elevenlabs.io/v1/text-to-speech/${voiceId}/stream?output_format=mp3_44100_128`;
        
        console.log('ElevenLabs TTS URL:', apiUrl);
        console.log('ElevenLabs –∑–∞–ø–∏—Ç:', JSON.stringify(payload, null, 2));
        
        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –∑ —Å–∏–≥–Ω–∞–ª–æ–º AbortController
        console.log('–í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –¥–æ ElevenLabs TTS API...');
        const response = await fetch(apiUrl, {
            method: 'POST',
            headers: {
                'Xi-Api-Key': apiKey,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(payload),
            signal: signal
        });
        
        console.log('ElevenLabs TTS –≤—ñ–¥–ø–æ–≤—ñ–¥—å —Å—Ç–∞—Ç—É—Å:', response.status, response.statusText);
        
        if (!response.ok) {
            const errorText = await response.text();
            console.error('ElevenLabs TTS –ø–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:', errorText);
            throw new Error(`–ü–æ–º–∏–ª–∫–∞ API: ${response.status} ${response.statusText} ${errorText}`);
        }
        
        // –û—Ç—Ä–∏–º—É—î–º–æ –∞—É–¥—ñ–æ blob –Ω–∞–ø—Ä—è–º—É –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        const audioBlob = await response.blob();
        console.log('ElevenLabs TTS –æ—Ç—Ä–∏–º–∞–Ω–æ –∞—É–¥—ñ–æ blob, —Ä–æ–∑–º—ñ—Ä:', audioBlob.size);
        
        // –û—á–∏—â–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π AbortController –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
        currentTTSAbortController = null;
        
        return audioBlob;
    } catch (error) {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–∞–ø–∏—Ç –±—É–≤ —Å–∫–∞—Å–æ–≤–∞–Ω–∏–π
        if (error.name === 'AbortError') {
            console.log('–ó–∞–ø–∏—Ç ElevenLabs TTS –±—É–≤ —Å–∫–∞—Å–æ–≤–∞–Ω–∏–π');
            throw new Error('–ó–∞–ø–∏—Ç TTS –±—É–≤ —Å–∫–∞—Å–æ–≤–∞–Ω–∏–π');
        }
        
        console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞—É–¥—ñ–æ –∑ ElevenLabs API:', error);
        throw error;
    } finally {
        // –í –±—É–¥—å-—è–∫–æ–º—É –≤–∏–ø–∞–¥–∫—É –æ—á–∏—â–∞—î–º–æ AbortController
        if (currentTTSAbortController) {
            // –Ø–∫—â–æ —Ü–µ —Ç–æ–π —Å–∞–º–∏–π –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä, —è–∫–∏–π –º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–ª–∏ –¥–ª—è —Ü—å–æ–≥–æ –∑–∞–ø–∏—Ç—É
            currentTTSAbortController = null;
        }
    }
}

// –ü–æ–ø—É–ª—è—Ä–Ω—ñ –≥–æ–ª–æ—Å–∏ ElevenLabs
const ELEVENLABS_POPULAR_VOICES = [
    { id: "EXAVITQu4vr4xnSDxMaL", name: "Sarah", gender: "female" },
    { id: "21m00Tcm4TlvDq8ikWAM", name: "Rachel", gender: "female" },
    { id: "AZnzlk1XvdvUeBnXmlld", name: "Domi", gender: "female" },
    { id: "29vD33N1CtxCmqQRPOHJ", name: "Drew", gender: "male" },
    { id: "2EiwWnXFnvU5JabPnv8n", name: "Clyde", gender: "male" },
    { id: "5Q0t7uMcjvnagumLfvZi", name: "Paul", gender: "male" },
    { id: "9BWtsMINqrJLrRacOk9x", name: "Aria", gender: "female" },
    { id: "CYw3kZ02Hs0563khs1Fj", name: "Dave", gender: "male" },
    { id: "CwhRBWXzGAHq8TQ4Fs17", name: "Roger", gender: "male" },
    { id: "D38z5RcWu1voky8WS1ja", name: "Fin", gender: "male" }
];

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó
window.voiceGenerator = {
    generateVoice,
    stopVoice,
    setVoiceSettings,
    getVoiceSettings,
    loadVoiceSettings,
    availableVoices: AVAILABLE_VOICES,
    elevenLabsVoices: ELEVENLABS_POPULAR_VOICES
};