// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º—É–ª—å—Ç–∏–ø–ª–µ—î—Ä —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è DnD –≥—Ä–∏
// –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å game.js

class MultiplayerManager {
    constructor() {
        this.socket = null;
        this.isHost = false;
        this.lobbyCode = null;
        this.players = [];
        this.currentActions = {};
        this.isConnected = false;
        this.reconnectAttempts = 0;
        this.maxReconnectAttempts = 5;
        this.gameState = null;
        this.playerId = null; // –î–æ–±–∞–≤–ª—è–µ–º ID –∏–≥—Ä–æ–∫–∞
        this.gameIntegration = null; // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å game.js
        
        // –ü–∏–Ω–≥ —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        this.pingInterval = null;
        this.pongTimeout = null;
        this.pingIntervalTime = 30000; // 30 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø–∏–Ω–≥–∞–º–∏
        this.pongTimeoutTime = 10000; // 10 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ–Ω–≥–∞
        
        this.initializeUI();
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –∏–≥—Ä–æ–∫–∞
    generatePlayerId() {
        return 'player_' + Math.random().toString(36).substr(2, 9);
    }

    // –ó–∞–ø—É—Å–∫ –ø–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã
    startPing() {
        if (this.pingInterval) {
            clearInterval(this.pingInterval);
        }
        
        this.pingInterval = setInterval(() => {
            if (this.socket && this.isConnected) {
                console.log('üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏–Ω–≥–∞ —Å–µ—Ä–≤–µ—Ä—É...');
                this.socket.send(JSON.stringify({
                    type: 'ping',
                    timestamp: Date.now()
                }));
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–Ω–≥–∞
                this.pongTimeout = setTimeout(() => {
                    console.warn('‚ö†Ô∏è –ù–µ –ø–æ–ª—É—á–µ–Ω –ø–æ–Ω–≥ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
                    this.handleConnectionTimeout();
                }, this.pongTimeoutTime);
            }
        }, this.pingIntervalTime);
        
        console.log('üîÑ –ü–∏–Ω–≥ —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ (–∏–Ω—Ç–µ—Ä–≤–∞–ª:', this.pingIntervalTime / 1000, '—Å–µ–∫)');
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã
    stopPing() {
        if (this.pingInterval) {
            clearInterval(this.pingInterval);
            this.pingInterval = null;
        }
        
        if (this.pongTimeout) {
            clearTimeout(this.pongTimeout);
            this.pongTimeout = null;
        }
        
        console.log('‚èπÔ∏è –ü–∏–Ω–≥ —Å–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –ø–æ–Ω–≥–∞
    handlePong() {
        console.log('üèì –ü–æ–ª—É—á–µ–Ω –ø–æ–Ω–≥ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
        if (this.pongTimeout) {
            clearTimeout(this.pongTimeout);
            this.pongTimeout = null;
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    handleConnectionTimeout() {
        console.error('‚ùå –¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è WebSocket');
        this.isConnected = false;
        this.stopPing();
        
        if (this.socket) {
            this.socket.close();
        }
        
        this.handleDisconnection();
    }

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è UI –¥–ª—è –º—É–ª—å—Ç–∏–ø–ª–µ—î—Ä–∞
    initializeUI() {
        // –°—Ç–≤–æ—Ä—é—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –¥–ª—è –º—É–ª—å—Ç–∏–ø–ª–µ—î—Ä–∞
        const multiplayerModal = document.createElement('div');
        multiplayerModal.id = 'multiplayerModal';
        multiplayerModal.className = 'modal';
        multiplayerModal.innerHTML = `
            <div class="modal-content">
                <div class="modal-header">
                    <h2 id="multiplayerModalTitle">üéÆ –ú—É–ª—å—Ç–∏–ø–ª–µ—î—Ä (–ë–ï–¢–ê)</h2>
                    <span class="close" id="closeMultiplayer">&times;</span>
                </div>
                <div class="modal-body">
                    <div class="beta-warning">
                        <h3 id="betaWarningTitle">‚ö†Ô∏è –£–í–ê–ì–ê: –ë–ï–¢–ê –í–ï–†–°–Ü–Ø</h3>
                        <p id="betaWarningText">–ú—É–ª—å—Ç–∏–ø–ª–µ—î—Ä –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Å—Ç–∞–¥—ñ—ó –±–µ—Ç–∞-—Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è. –ú–æ–∂–ª–∏–≤—ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –±–∞–ª–∞–Ω—Å–æ–º —Ç–∞ —Å—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—é.</p>
                    </div>
                    
                    <div id="multiplayerMenu">
                        <button id="hostGameBtn" class="mp-btn primary">–°—Ç–≤–æ—Ä–∏—Ç–∏ –ª–æ–±—ñ</button>
                        <button id="joinGameBtn" class="mp-btn secondary">–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –ª–æ–±—ñ</button>
                    </div>
                    
                    <div id="hostLobby" style="display: none;">
                        <h3 id="lobbyCodeTitle">–í–∞—à –∫–æ–¥ –ª–æ–±—ñ:</h3>
                        <div class="lobby-code" id="lobbyCodeDisplay"></div>
                        <p id="shareLobbyText">–ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Ü–∏–º –∫–æ–¥–æ–º –∑ –¥—Ä—É–∑—è–º–∏</p>
                        <div id="playersList"></div>
                        <button id="startGameBtn" class="mp-btn primary" disabled>–ü–æ—á–∞—Ç–∏ –≥—Ä—É</button>
                    </div>
                    
                    <div id="joinLobby" style="display: none;">
                        <h3 id="enterLobbyCodeTitle">–í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –ª–æ–±—ñ:</h3>
                        <input type="text" id="lobbyCodeInput" placeholder="–ö–æ–¥ –ª–æ–±—ñ (6 —Å–∏–º–≤–æ–ª—ñ–≤)" maxlength="6">
                        <button id="connectBtn" class="mp-btn primary">–ü—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è</button>
                    </div>
                    
                    <div id="gameSession" style="display: none;">
                        <div class="players-status">
                            <h3 id="playersInSessionTitle">–ì—Ä–∞–≤—Ü—ñ –≤ —Å–µ—Å—ñ—ó:</h3>
                            <div id="playersStatus"></div>
                        </div>
                        <div class="action-status">
                            <div id="actionStatus">–û—á—ñ–∫—É–≤–∞–Ω–Ω—è –¥—ñ–π –≥—Ä–∞–≤—Ü—ñ–≤...</div>
                            <div id="actionProgress"></div>
                        </div>
                        <button id="leaveGameBtn" class="mp-btn danger">–ü–æ–∫–∏–Ω—É—Ç–∏ –≥—Ä—É</button>
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(multiplayerModal);
        
        // –î–æ–¥–∞—î–º–æ —Å—Ç–∏–ª—ñ
        this.addStyles();
        
        // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
        this.attachEventListeners();
    }

    addStyles() {
        const style = document.createElement('style');
        style.textContent = `
            .modal {
                display: none;
                position: fixed;
                z-index: 1000;
                left: 0;
                top: 0;
                width: 100%;
                height: 100%;
                background-color: rgba(0,0,0,0.5);
            }
            
            .modal-content {
                background-color: #2a2a2a;
                margin: 5% auto;
                padding: 0;
                border: 1px solid #555;
                border-radius: 10px;
                width: 90%;
                max-width: 500px;
                color: #fff;
            }
            
            .modal-header {
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                padding: 20px;
                border-radius: 10px 10px 0 0;
                display: flex;
                justify-content: space-between;
                align-items: center;
            }
            
            .modal-header h2 {
                margin: 0;
                color: white;
            }
            
            .close {
                color: white;
                font-size: 28px;
                font-weight: bold;
                cursor: pointer;
            }
            
            .close:hover {
                opacity: 0.7;
            }
            
            .modal-body {
                padding: 20px;
            }
            
            .beta-warning {
                background: #ff6b35;
                padding: 15px;
                border-radius: 8px;
                margin-bottom: 20px;
                text-align: center;
            }
            
            .beta-warning h3 {
                margin: 0 0 10px 0;
                color: white;
            }
            
            .beta-warning p {
                margin: 0;
                color: white;
                font-size: 14px;
            }
            
            .mp-btn {
                padding: 12px 24px;
                border: none;
                border-radius: 6px;
                cursor: pointer;
                font-size: 16px;
                margin: 5px;
                transition: all 0.3s ease;
                width: 100%;
            }
            
            .mp-btn.primary {
                background: #4CAF50;
                color: white;
            }
            
            .mp-btn.secondary {
                background: #2196F3;
                color: white;
            }
            
            .mp-btn.danger {
                background: #f44336;
                color: white;
            }
            
            .mp-btn:hover:not(:disabled) {
                transform: translateY(-2px);
                box-shadow: 0 4px 8px rgba(0,0,0,0.3);
            }
            
            .mp-btn:disabled {
                background: #666;
                cursor: not-allowed;
                opacity: 0.6;
            }
            
            .lobby-code {
                font-size: 32px;
                font-weight: bold;
                text-align: center;
                background: #333;
                padding: 20px;
                border-radius: 8px;
                margin: 10px 0;
                letter-spacing: 4px;
                color: #4CAF50;
            }
            
            #lobbyCodeInput {
                width: 100%;
                padding: 12px;
                font-size: 18px;
                border: 2px solid #555;
                border-radius: 6px;
                background: #333;
                color: white;
                text-align: center;
                letter-spacing: 2px;
                text-transform: uppercase;
                margin-bottom: 15px;
            }
            
            .players-status, .action-status {
                background: #333;
                padding: 15px;
                border-radius: 8px;
                margin: 10px 0;
            }
            
            .player-item {
                display: flex;
                justify-content: space-between;
                align-items: center;
                padding: 8px 0;
                border-bottom: 1px solid #555;
            }
            
            .player-item:last-child {
                border-bottom: none;
            }
            
            .player-status {
                padding: 4px 8px;
                border-radius: 4px;
                font-size: 12px;
            }
            
            .status-online {
                background: #4CAF50;
                color: white;
            }
            
            .status-offline {
                background: #f44336;
                color: white;
            }
            
            .status-waiting {
                background: #ff9800;
                color: white;
            }
            
            .action-progress {
                margin-top: 10px;
            }
            
            .progress-bar {
                width: 100%;
                height: 20px;
                background: #555;
                border-radius: 10px;
                overflow: hidden;
            }
            
            .progress-fill {
                height: 100%;
                background: linear-gradient(90deg, #4CAF50, #45a049);
                transition: width 0.3s ease;
            }
        `;
        document.head.appendChild(style);
    }

    attachEventListeners() {
        // –ó–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
        document.getElementById('closeMultiplayer').addEventListener('click', () => {
            this.hideModal();
        });

        // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ª–æ–±—ñ
        document.getElementById('hostGameBtn').addEventListener('click', () => {
            this.hostGame();
        });

        // –ü—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –ª–æ–±—ñ
        document.getElementById('joinGameBtn').addEventListener('click', () => {
            this.showJoinLobby();
        });

        // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ª–æ–±—ñ
        document.getElementById('connectBtn').addEventListener('click', () => {
            const code = document.getElementById('lobbyCodeInput').value.trim().toUpperCase();
            if (code.length === 6) {
                this.joinGame(code);
            } else {
                alert('–ö–æ–¥ –ª–æ–±—ñ –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ 6 —Å–∏–º–≤–æ–ª—ñ–≤');
            }
        });

        // –ü–æ—á–∞—Ç–æ–∫ –≥—Ä–∏
        document.getElementById('startGameBtn').addEventListener('click', () => {
            this.startMultiplayerGame();
        });

        // –ü–æ–∫–∏–Ω—É—Ç–∏ –≥—Ä—É
        document.getElementById('leaveGameBtn').addEventListener('click', () => {
            this.leaveGame();
        });

        // –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ–¥—É –ª–æ–±—ñ
        document.getElementById('lobbyCodeInput').addEventListener('input', (e) => {
            e.target.value = e.target.value.toUpperCase().replace(/[^A-Z0-9]/g, '');
        });
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞
    updateUITexts() {
        const getText = (key) => {
            // Fallback to window.getText if it exists
            if (typeof window.getText === 'function') {
                return window.getText(key);
            }
            if (window.localization && window.gameState && window.localization[window.gameState.language]) {
                return window.localization[window.gameState.language][key] || key;
            }
            return key;
        };

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        document.getElementById('multiplayerModalTitle').textContent = `üéÆ ${getText('multiplayer')}`;
        document.getElementById('betaWarningTitle').textContent = getText('multiplayerBetaWarning');
        document.getElementById('betaWarningText').textContent = getText('multiplayerBetaDesc');
        
        document.getElementById('hostGameBtn').textContent = getText('createLobby');
        document.getElementById('joinGameBtn').textContent = getText('joinLobby');
        
        document.getElementById('lobbyCodeTitle').textContent = getText('lobbyCode');
        document.getElementById('shareLobbyText').textContent = getText('shareLobbyCode');
        document.getElementById('startGameBtn').textContent = getText('startGame');
        
        document.getElementById('enterLobbyCodeTitle').textContent = getText('enterLobbyCode');
        document.getElementById('lobbyCodeInput').placeholder = getText('lobbyCodePlaceholder');
        document.getElementById('connectBtn').textContent = getText('connect');
        
        document.getElementById('playersInSessionTitle').textContent = getText('playersInSession');
        document.getElementById('leaveGameBtn').textContent = getText('leaveGame');
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–æ–¥—É –ª–æ–±—ñ
    generateLobbyCode() {
        const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
        let result = '';
        for (let i = 0; i < 6; i++) {
            result += chars.charAt(Math.floor(Math.random() * chars.length));
        }
        return result;
    }

    // –ü–æ–∫–∞–∑–∞—Ç–∏ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
    showModal() {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç—ã –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º
        this.updateUITexts();
        document.getElementById('multiplayerModal').style.display = 'block';
    }

    // –°—Ö–æ–≤–∞—Ç–∏ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
    hideModal() {
        document.getElementById('multiplayerModal').style.display = 'none';
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –µ—Å–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ –∏–≥—Ä–∞
        if (!window.multiplayerState || !window.multiplayerState.isActive) {
            document.getElementById('mainMenu').style.display = 'block';
        }
    }

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∏
    hostGame() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –ª–æ–±–±–∏
        if (!window.gameState || !window.gameState.apiKey) {
            const getText = window.getText || ((key) => key);
            alert(getText('hostApiKeyRequired') || '–•–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å Gemini API –∫–ª—é—á –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –ª–æ–±–±–∏');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω API setup
            this.hideModal();
            document.getElementById('mainMenu').style.display = 'none';
            document.getElementById('apiSetup').style.display = 'block';
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä—É –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ API –∫–ª—é—á–∞
            const originalSaveApiKey = window.saveApiKey;
            window.saveApiKey = function() {
                const apiKey = document.getElementById('apiKey').value.trim();
                if (apiKey) {
                    window.gameState.apiKey = apiKey;
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
                    if (window.voiceGenerator) {
                        const voiceEnabled = document.getElementById('voiceEnabled').checked;
                        const voiceService = document.getElementById('voiceService').value;
                        const elevenLabsApiKey = document.getElementById('elevenLabsApiKey').value.trim();
                        
                        window.gameState.shortResponses = document.getElementById('shortResponsesEnabled').checked;
                        
                        let voiceSettings = {
                            isEnabled: voiceEnabled,
                            service: voiceService
                        };
                        
                        if (voiceService === 'gemini') {
                            voiceSettings.voice = document.getElementById('geminiVoiceSelect').value;
                        } else if (voiceService === 'elevenlabs') {
                            voiceSettings.elevenLabsApiKey = elevenLabsApiKey;
                            voiceSettings.elevenLabsVoice = document.getElementById('elevenLabsVoiceSelect').value;
                        }
                        
                        window.voiceGenerator.setVoiceSettings(voiceSettings);
                        window.gameState.voiceSettings = window.voiceGenerator.getVoiceSettings();
                    }
                    
                    document.getElementById('apiSetup').style.display = 'none';
                    initSoundControls();
                    
                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ–∑–¥–∞–Ω–∏—é –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä –ª–æ–±–±–∏
                    setTimeout(() => {
                        window.multiplayerManager.hostGame();
                    }, 100);
                    
                    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                    window.saveApiKey = originalSaveApiKey;
                } else {
                    const getText = window.getText || ((key) => key);
                    alert(getText('enterApiKey') || '–í–≤–µ–¥—ñ—Ç—å API –∫–ª—é—á');
                }
            };
            return;
        }
        
        this.isHost = true;
        this.lobbyCode = this.generateLobbyCode();
        this.playerId = this.generatePlayerId();
        
        document.getElementById('multiplayerMenu').style.display = 'none';
        document.getElementById('hostLobby').style.display = 'block';
        document.getElementById('lobbyCodeDisplay').textContent = this.lobbyCode;
        
        this.connectToServer();
    }

    // –ü–æ–∫–∞–∑ –µ–∫—Ä–∞–Ω—É –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –ª–æ–±—ñ
    showJoinLobby() {
        document.getElementById('multiplayerMenu').style.display = 'none';
        document.getElementById('joinLobby').style.display = 'block';
    }

    // –ü—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –≥—Ä–∏
    joinGame(code) {
        this.isHost = false;
        this.lobbyCode = code;
        this.playerId = this.generatePlayerId();
        
        document.getElementById('joinLobby').style.display = 'none';
        
        this.connectToServer();
    }

    // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞
    connectToServer() {
        const serverUrl = 'ws://localhost:3001';
        console.log('–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞:', serverUrl);
        
        try {
            this.socket = new WebSocket(serverUrl);
            
            this.socket.onopen = () => {
                console.log('–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ —Å–µ—Ä–≤–µ—Ä–∞');
                this.isConnected = true;
                this.reconnectAttempts = 0;
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                this.startPing();
                
                if (this.isHost) {
                    // –°—Ç–≤–æ—Ä—é—î–º–æ –ª–æ–±—ñ
                    this.socket.send(JSON.stringify({
                        type: 'create_lobby',
                        code: this.lobbyCode,
                        playerName: this.getPlayerName()
                    }));
                } else {
                    // –ü—Ä–∏—î–¥–Ω—É—î–º–æ—Å—è –¥–æ –ª–æ–±—ñ
                    this.socket.send(JSON.stringify({
                        type: 'join_lobby',
                        code: this.lobbyCode,
                        playerName: this.getPlayerName()
                    }));
                }
            };
            
            this.socket.onmessage = (event) => {
                try {
                    const message = JSON.parse(event.data);
                    this.handleServerMessage(message);
                } catch (error) {
                    console.error('–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', error);
                }
            };
            
            this.socket.onclose = () => {
                console.log('–ó\'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º –∑–∞–∫—Ä–∏—Ç–æ');
                this.isConnected = false;
                this.stopPing(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—É –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                this.handleDisconnection();
            };
            
            this.socket.onerror = (error) => {
                console.error('–ü–æ–º–∏–ª–∫–∞ WebSocket:', error);
                this.isConnected = false;
            };
            
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è WebSocket:', error);
            alert('–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ.');
        }
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∫–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Ö–æ—Å—Ç–∞
    kickPlayer(playerId) {
        if (!this.isHost) {
            console.error('–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –∫–∏–∫–∞—Ç—å –∏–≥—Ä–æ–∫–æ–≤');
            return;
        }
        
        if (this.socket && this.isConnected) {
            this.socket.send(JSON.stringify({
                type: 'kick_player',
                playerId: playerId
            }));
        }
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 3: –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–∏–∫–∞ –¥–ª—è —Ö–æ—Å—Ç–∞
    updatePlayersList(players) {
        console.log('=== –ù–ê–ß–ê–õ–û updatePlayersList ===');
        console.log('–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ players:', players);
        try {
            console.log('updatePlayersList –≤—ã–∑–≤–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏:', players);
            this.players = players;
            console.log('this.players —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
            const playersList = document.getElementById('playersList');
            const playersStatus = document.getElementById('playersStatus');
            console.log('–≠–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã:', {playersList: !!playersList, playersStatus: !!playersStatus});
        
        console.log('–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–≥—Ä–æ–∫–æ–≤...');
        const playersHTML = players.map(player => {
            console.log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–≥—Ä–æ–∫–∞ ${player.name}: character =`, player.character, ', status =', player.status);
            const kickButton = this.isHost && player.id !== this.playerId ? 
                `<button onclick="window.multiplayerManager.kickPlayer('${player.id}')" 
                         style="background: #f44336; color: white; border: none; border-radius: 3px; padding: 2px 8px; margin-left: 10px; cursor: pointer; font-size: 10px;">
                    ‚ùå –ö–∏–∫
                </button>` : '';
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–ª–∏—á–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            let playerStatus = player.status;
            let statusText = this.getStatusText(playerStatus);
            
            if (player.character) {
                statusText = '‚úÖ –ì–æ—Ç–æ–≤';
                playerStatus = 'ready';
            } else if (playerStatus === 'online') {
                statusText = '‚è≥ –°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞';
                playerStatus = 'creating';
            }
            
            return `
                <div class="player-item">
                    <span>${player.name}${kickButton}</span>
                    <span class="player-status status-${playerStatus}">${statusText}</span>
                </div>
            `;
        }).join('');
        
        console.log('HTML –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω, –¥–ª–∏–Ω–∞:', playersHTML.length);
        
        if (playersList) {
            const getText = window.getText || ((key) => key);
            const playersTitle = getText('playersInLobby') || `–ì—Ä–∞–≤—Ü—ñ (${players.length}/4):`;
            playersList.innerHTML = `<h4>${playersTitle}</h4>` + playersHTML;
        }
        
        if (playersStatus) {
            playersStatus.innerHTML = playersHTML;
        }
        
        // –ê–∫—Ç–∏–≤—É—î–º–æ –∫–Ω–æ–ø–∫—É –ø–æ—á–∞—Ç–∫—É –≥—Ä–∏ –¥–ª—è —Ö–æ—Å—Ç–∞
        const startBtn = document.getElementById('startGameBtn');
        console.log('–ò—â–µ–º –∫–Ω–æ–ø–∫—É startGameBtn:', startBtn ? '–Ω–∞–π–¥–µ–Ω–∞' : '–ù–ï –Ω–∞–π–¥–µ–Ω–∞');
        console.log('–Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ö–æ—Å—Ç–æ–º:', this.isHost);
        if (startBtn && this.isHost) {
            const getText = window.getText || ((key) => key);
            console.log('–û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ä—Ç–∞ –∏–≥—Ä—ã. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤:', players.length);
            startBtn.disabled = players.length < 2;
            if (players.length < 2) {
                startBtn.textContent = getText('needMinPlayersBtn') || `–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞ (${players.length}/4)`;
            } else {
                startBtn.textContent = getText('startGameBtn') || `–ù–∞—á–∞—Ç—å –∏–≥—Ä—É (${players.length} –∏–≥—Ä–æ–∫–æ–≤)`;
            }
            console.log('–ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞. Disabled:', startBtn.disabled, 'Text:', startBtn.textContent);
        }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤ updatePlayersList:', error);
        }
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 4: –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    handleServerMessage(message) {
        console.log('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', message.type, message);
        
        switch (message.type) {
            case 'lobby_created':
                // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º playerId –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞
                if (message.playerId) {
                    console.log('–û–±–Ω–æ–≤–ª—è–µ–º playerId —Å', this.playerId, '–Ω–∞', message.playerId);
                    this.playerId = message.playerId;
                }
                this.updatePlayersList(message.players);
                if (this.gameIntegration && this.gameIntegration.onLobbyCreated) {
                    this.gameIntegration.onLobbyCreated(message);
                }
                break;
                
            case 'lobby_joined':
                // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º playerId –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –ª–æ–±–±–∏
                if (message.playerId) {
                    console.log('–û–±–Ω–æ–≤–ª—è–µ–º playerId –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –ª–æ–±–±–∏ —Å', this.playerId, '–Ω–∞', message.playerId);
                    this.playerId = message.playerId;
                }
                this.updatePlayersList(message.players);
                if (this.gameIntegration && this.gameIntegration.onLobbyJoined) {
                    this.gameIntegration.onLobbyJoined(message);
                }
                break;
                
            case 'player_joined':
                console.log('–ò–≥—Ä–æ–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –ª–æ–±–±–∏. –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏:', message.players.length);
                console.log('–í—ã–∑—ã–≤–∞–µ–º updatePlayersList...');
                // –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤, ID —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ lobby_joined
                this.updatePlayersList(message.players);
                console.log('updatePlayersList –∑–∞–≤–µ—Ä—à–µ–Ω');
                if (this.gameIntegration && this.gameIntegration.onPlayerJoined) {
                    this.gameIntegration.onPlayerJoined(message);
                }
                break;
                
            case 'player_left':
                this.updatePlayersList(message.players);
                if (this.gameIntegration && this.gameIntegration.onPlayerLeft) {
                    this.gameIntegration.onPlayerLeft(message);
                }
                break;
                
            case 'player_kicked':
                if (message.kickedPlayerId === this.playerId) {
                    // –≠—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∫–∏–∫–Ω—É–ª–∏
                    const getText = window.getText || ((key) => key);
                    alert(getText('youWereKicked') || '–í–∞—Å –∏—Å–∫–ª—é—á–∏–ª–∏ –∏–∑ –ª–æ–±–±–∏');
                    this.leaveGame();
                } else {
                    // –ö—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–π –±—ã–ª –∫–∏–∫–Ω—É—Ç
                    this.updatePlayersList(message.players);
                }
                break;
                
            case 'game_started':
                console.log('–ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞, —Å–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞');
                
                // –í–∞–∂–Ω–æ: –ù–ï –≤—ã–∑—ã–≤–∞–µ–º hideModal(), —Ç–∞–∫ –∫–∞–∫ –∏–≥—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞
                document.getElementById('multiplayerModal').style.display = 'none';
                
                if (this.gameIntegration && this.gameIntegration.onGameStarted) {
                    this.gameIntegration.onGameStarted(message);
                }
                break;
                
            case 'character_created':
                console.log('–ü–µ—Ä—Å–æ–Ω–∞–∂ —Å–æ–∑–¥–∞–Ω –∏–≥—Ä–æ–∫–æ–º:', message.playerId, message.character);
                console.log('–ü–æ–ª—É—á–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤:', message.players);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ —Å –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                if (message.players) {
                    console.log('–û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤...');
                    this.updatePlayersList(message.players);
                }
                
                if (this.gameIntegration && this.gameIntegration.onCharacterCreated) {
                    this.gameIntegration.onCharacterCreated(message);
                }
                break;
                
            case 'all_characters_ready':
                if (this.gameIntegration && this.gameIntegration.onAllCharactersReady) {
                    this.gameIntegration.onAllCharactersReady(message);
                }
                break;
                
            case 'initial_story_received':
                if (this.gameIntegration && this.gameIntegration.onInitialStoryReceived) {
                    this.gameIntegration.onInitialStoryReceived(message);
                }
                break;
                
            case 'action_received':
                if (this.gameIntegration && this.gameIntegration.onActionReceived) {
                    this.gameIntegration.onActionReceived(message);
                }
                break;
                
            case 'all_actions_received':
                if (this.gameIntegration && this.gameIntegration.onAllActionsReceived) {
                    this.gameIntegration.onAllActionsReceived(message);
                }
                break;
                
            case 'turn_complete':
                if (this.gameIntegration && this.gameIntegration.onTurnComplete) {
                    this.gameIntegration.onTurnComplete(message);
                }
                break;
                
            case 'image_shared':
                if (this.gameIntegration && this.gameIntegration.onImageShared) {
                    this.gameIntegration.onImageShared(message);
                }
                break;
                
            case 'player_disconnected':
                if (this.gameIntegration && this.gameIntegration.onPlayerDisconnected) {
                    this.gameIntegration.onPlayerDisconnected(message);
                }
                break;
                
                case 'pong':
                this.handlePong();
                break;
                
            case 'error':
                    if (this.gameIntegration && this.gameIntegration.onError) {
                        this.gameIntegration.onError(message);
                    } else {
                        alert('–ü–æ–º–∏–ª–∫–∞: ' + message.message);
                    }
                    break;
            }
            
    }
    getPlayerName() {
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –∏–∑ gameState
        if (window.gameState && window.gameState.character && window.gameState.character.name) {
            return window.gameState.character.name;
        }
        
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const getText = window.getText || ((key) => key);
        const name = prompt(getText('enterPlayerName') || '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:');
        return name || `Player${this.playerId.slice(-4)}`;
    }
    



    getStatusText(status) {
        const getText = (key) => {
            // Fallback to window.getText if it exists
            if (typeof window.getText === 'function') {
                return window.getText(key);
            }
            if (window.localization && window.gameState && window.localization[window.gameState.language]) {
                return window.localization[window.gameState.language][key] || key;
            }
            return key;
        };

        const statusTexts = {
            online: getText('online'),
            offline: getText('offline'),
            waiting: getText('waiting'),
            ready: getText('ready')
        };
        return statusTexts[status] || status;
    }

    // –ü–æ—á–∞—Ç–æ–∫ –º—É–ª—å—Ç–∏–ø–ª–µ—î—Ä–Ω–æ—ó –≥—Ä–∏
    startMultiplayerGame() {
        if (!this.isHost) {
            console.error('–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É');
            return;
        }
        
        if (this.players.length < 2) {
            alert('–ü–æ—Ç—Ä—ñ–±–Ω–æ –º—ñ–Ω—ñ–º—É–º 2 –≥—Ä–∞–≤—Ü—ñ –¥–ª—è –ø–æ—á–∞—Ç–∫—É –≥—Ä–∏');
            return;
        }
        
        if (!window.gameState || !window.gameState.apiKey) {
            alert('–•–æ—Å—Ç –ø–æ–≤–∏–Ω–µ–Ω –Ω–∞–¥–∞—Ç–∏ Gemini API –∫–ª—é—á –ø–µ—Ä–µ–¥ –ø–æ—á–∞—Ç–∫–æ–º –≥—Ä–∏');
            return;
        }
        
        if (this.socket && this.isConnected) {
            console.log('–•–æ—Å—Ç –∑–∞–ø—É—Å–∫–∞—î –º—É–ª—å—Ç–∏–ø–ª–µ—î—Ä–Ω—É –≥—Ä—É...');
            this.socket.send(JSON.stringify({
                type: 'start_game',
                gameState: {
                    ...window.gameState,
                    isMultiplayer: true,
                    hostApiKey: window.gameState.apiKey
                }
            }));
        }
    }

    // –ü–æ–∫–∏–Ω—É—Ç–∏ –≥—Ä—É
    leaveGame() {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        this.stopPing();
        
        if (this.socket) {
            this.socket.close();
            this.socket = null;
        }
        
        this.isConnected = false;
        this.isHost = false;
        this.lobbyCode = null;
        this.players = [];
        this.currentActions = {};
        
        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
        document.getElementById('hostLobby').style.display = 'none';
        document.getElementById('joinLobby').style.display = 'none';
        document.getElementById('gameSession').style.display = 'none';
        document.getElementById('multiplayerMenu').style.display = 'block';
        
        this.hideModal();
    }

    // –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
    handleDisconnection() {
        if (this.reconnectAttempts < this.maxReconnectAttempts) {
            if (window.handleMultiplayerDisconnect) {
                window.handleMultiplayerDisconnect();
            }
        } else {
            alert('–í—Ç—Ä–∞—á–µ–Ω–æ –∑\'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º');
            this.leaveGame();
        }
    }

    // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    reconnect() {
        this.reconnectAttempts++;
        setTimeout(() => this.connectToServer(), 2000);
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∞–∫—Ç–∏–≤–Ω–∏–π –º—É–ª—å—Ç–∏–ø–ª–µ—î—Ä
    isMultiplayerActive() {
        return this.isConnected && this.socket;
    }

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≥—Ä–∞–≤—Ü—ñ–≤
    getPlayerCount() {
        return this.players.length;
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –º—É–ª—å—Ç–∏–ø–ª–µ—î—Ä–∞
window.multiplayerManager = new MultiplayerManager();

// –ï–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ —ñ–Ω—à–∏—Ö —Ñ–∞–π–ª–∞—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = MultiplayerManager;
}