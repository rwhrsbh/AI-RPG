// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º—É–ª—å—Ç–∏–ø–ª–µ—î—Ä —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è DnD –≥—Ä–∏
// –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å game.js

class MultiplayerManager {
    constructor() {
        this.socket = null;
        this.isHost = false;
        this.lobbyCode = null;
        this.players = [];
        this.currentActions = {};
        this.isConnected = false;
        this.reconnectAttempts = 0;
        this.maxReconnectAttempts = 5;
        this.gameState = null;
        this.playerId = this.getPersistentPlayerId(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π ID –∏–≥—Ä–æ–∫–∞
        this.gameIntegration = null; // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å game.js
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º URL —Å–µ—Ä–≤–µ—Ä–∞
        // this.serverUrl = 'ws://localhost:3001';
        this.serverUrl = 'wss://ai-rpg-c4df.onrender.com';
        // this.serverUrl = 'wss://f486-185-136-134-229.ngrok-free.app';
        
        // –ü–∏–Ω–≥ —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        this.pingInterval = null;
        this.pongTimeout = null;
        this.pingIntervalTime = 30000; // 30 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø–∏–Ω–≥–∞–º–∏
        this.pongTimeoutTime = 100000000; // 10 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ–Ω–≥–∞
        
        this.initializeUI();
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –∏–≥—Ä–æ–∫–∞
    generatePlayerId() {
        return 'player_' + Math.random().toString(36).substr(2, 9);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ ID –∏–≥—Ä–æ–∫–∞ –∏–∑ localStorage –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ
    getPersistentPlayerId() {
        let playerId = localStorage.getItem('dndPlayerId');
        if (!playerId) {
            playerId = this.generatePlayerId();
            localStorage.setItem('dndPlayerId', playerId);
            console.log('üÜî –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π ID –∏–≥—Ä–æ–∫–∞:', playerId);
        } else {
            console.log('üÜî –ó–∞–≥—Ä—É–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID –∏–≥—Ä–æ–∫–∞:', playerId);
        }
        return playerId;
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ö–æ—Å—Ç –ª–æ–±–±–∏
    saveLastHostLobby(lobbyCode) {
        localStorage.setItem('dndLastHostLobby', lobbyCode);
        localStorage.setItem('dndLastHostTime', Date.now().toString());
        console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ö–æ—Å—Ç –ª–æ–±–±–∏:', lobbyCode);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ö–æ—Å—Ç –ª–æ–±–±–∏
    getLastHostLobby() {
        const lobbyCode = localStorage.getItem('dndLastHostLobby');
        const timestamp = localStorage.getItem('dndLastHostTime');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–æ–±–±–∏ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ –Ω–µ –±–æ–ª–µ–µ 24*60 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
        
        if (lobbyCode && timestamp) {
            const minutesAgo = (Date.now() - parseInt(timestamp)) / (1000 * 60);
            if (minutesAgo < 24*60) {
                console.log('üîÑ –ù–∞–π–¥–µ–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ö–æ—Å—Ç –ª–æ–±–±–∏:', lobbyCode, `(${Math.round(minutesAgo)} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥)`);
                return lobbyCode;
            } else {
                console.log('‚è∞ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Ö–æ—Å—Ç –ª–æ–±–±–∏ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ, —É–¥–∞–ª—è–µ–º');
                this.clearLastHostLobby();
            }
        }
        return null;
    }

    // –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ö–æ—Å—Ç –ª–æ–±–±–∏
    clearLastHostLobby() {
        localStorage.removeItem('dndLastHostLobby');
        localStorage.removeItem('dndLastHostTime');
        console.log('üóëÔ∏è –î–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ö–æ—Å—Ç –ª–æ–±–±–∏ –æ—á–∏—â–µ–Ω—ã');
    }

    // –ó–∞–ø—É—Å–∫ –ø–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã
    startPing() {
        if (this.pingInterval) {
            clearInterval(this.pingInterval);
        }
        
        this.pingInterval = setInterval(() => {
            if (this.socket && this.isConnected) {
                console.log('üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏–Ω–≥–∞ —Å–µ—Ä–≤–µ—Ä—É...');
                this.socket.send(JSON.stringify({
                    type: 'ping',
                    playerId: this.playerId,
                    timestamp: Date.now()
                }));
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–Ω–≥–∞
                this.pongTimeout = setTimeout(() => {
                    console.warn('‚ö†Ô∏è –ù–µ –ø–æ–ª—É—á–µ–Ω –ø–æ–Ω–≥ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
                    this.handleConnectionTimeout();
                }, this.pongTimeoutTime);
            }
        }, this.pingIntervalTime);
        
        console.log('üîÑ –ü–∏–Ω–≥ —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ (–∏–Ω—Ç–µ—Ä–≤–∞–ª:', this.pingIntervalTime / 1000, '—Å–µ–∫)');
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã
    stopPing() {
        if (this.pingInterval) {
            clearInterval(this.pingInterval);
            this.pingInterval = null;
        }
        
        if (this.pongTimeout) {
            clearTimeout(this.pongTimeout);
            this.pongTimeout = null;
        }
        
        console.log('‚èπÔ∏è –ü–∏–Ω–≥ —Å–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –ø–æ–Ω–≥–∞
    handlePong() {
        console.log('üèì –ü–æ–ª—É—á–µ–Ω –ø–æ–Ω–≥ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
        if (this.pongTimeout) {
            clearTimeout(this.pongTimeout);
            this.pongTimeout = null;
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    handleConnectionTimeout() {
        console.error('‚ùå –¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è WebSocket');
        this.isConnected = false;
        this.stopPing();
        
        if (this.socket) {
            this.socket.close();
        }
        
        this.handleDisconnection();
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ö–æ–¥–∞
    handleTurnStateReset(message) {
        console.log('üîÑ –ü–æ–ª—É—á–µ–Ω —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ö–æ–¥–∞:', message);
        
        // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        if (document.getElementById('customActionBtn')) {
            document.getElementById('customActionBtn').disabled = false;
        }
        if (document.getElementById('customAction')) {
            document.getElementById('customAction').disabled = false;
        }
        
        // –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        document.querySelectorAll('.option-btn').forEach(btn => {
            btn.disabled = false;
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ
        if (window.showMultiplayerError) {
            window.showMultiplayerError(message.message || '–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ö–æ–¥–∞ —Å–±—Ä–æ—à–µ–Ω–æ, –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è');
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ AI
    handleAIErrorNotification(message) {
        console.error('‚ùå –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ AI:', message);
        
        // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        if (document.getElementById('customActionBtn')) {
            document.getElementById('customActionBtn').disabled = false;
        }
        if (document.getElementById('customAction')) {
            document.getElementById('customAction').disabled = false;
        }
        
        // –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        document.querySelectorAll('.option-btn').forEach(btn => {
            btn.disabled = false;
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É (—É–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —ç—Ç–æ –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞)
        if (window.showMultiplayerError) {
            window.showMultiplayerError(message.message, true);
        }
    }

    // –ü–æ–∫–∞–∑ –ø–æ–ø–∞–ø–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    showCharacterSelectionPopup(message) {
        console.log('–ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:', message);
        
        // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ø–∞–ø –µ—Å–ª–∏ –µ—Å—Ç—å
        const existingPopup = document.getElementById('characterSelectionPopup');
        if (existingPopup) {
            existingPopup.remove();
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–æ–ø–∞–ø
        const popup = document.createElement('div');
        popup.id = 'characterSelectionPopup';
        popup.className = 'modal';
        popup.style.display = 'block';
        
        const getText = (key) => {
            if (typeof window.getText === 'function') {
                return window.getText(key);
            }
            if (window.localization && window.gameState && window.localization[window.gameState.language]) {
                return window.localization[window.gameState.language][key] || key;
            }
            return key;
        };
        
        popup.innerHTML = `
            <div class="modal-content" style="max-width: 500px;">
                <div class="modal-header" style="background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%);">
                    <h2>üéÆ ${getText('selectCharacter') || '–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞'}</h2>
                </div>
                <div class="modal-body">
                    <p style="margin-bottom: 20px;">${getText('selectCharacterInfo') || '–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å. –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:'}</p>
                    
                    <div class="character-selection-list">
                        ${message.availableCharacters.map(char => `
                            <div class="character-option" onclick="window.multiplayerManager.selectCharacter('${char.id}', '${message.lobbyCode}')" 
                                 style="padding: 15px; margin: 10px 0; background: rgba(76, 175, 80, 0.1); border: 2px solid transparent; border-radius: 8px; cursor: pointer; transition: all 0.3s ease;">
                                <h3 style="margin: 0 0 10px 0; color: #4CAF50;">${char.name}</h3>
                                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px; font-size: 14px;">
                                    <div><strong>${getText('characterName') || '–ò–º—è'}:</strong> ${char.character.name}</div>
                                    <div><strong>${getText('class') || '–ö–ª–∞—Å—Å'}:</strong> ${char.character.class}</div>
                                    <div><strong>${getText('level') || '–£—Ä–æ–≤–µ–Ω—å'}:</strong> ${char.character.level}</div>
                                    <div><strong>${getText('health') || '–ó–¥–æ—Ä–æ–≤—å–µ'}:</strong> ${char.character.health}/${char.character.maxHealth}</div>
                                </div>
                                ${char.character.perks && char.character.perks.length > 0 ? `
                                    <div style="margin-top: 10px;">
                                        <strong>${getText('perks') || '–ü–µ—Ä–∫–∏'}:</strong>
                                        <div style="font-size: 12px; color: #666; margin-top: 5px;">
                                            ${char.character.perks.slice(0, 3).join(', ')}${char.character.perks.length > 3 ? '...' : ''}
                                        </div>
                                    </div>
                                ` : ''}
                            </div>
                        `).join('')}
                    </div>
                    
                    <div style="text-align: center; margin-top: 20px;">
                        <button class="mp-btn secondary" onclick="window.multiplayerManager.cancelCharacterSelection()">${getText('cancel') || '–û—Ç–º–µ–Ω–∞'}</button>
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(popup);
        
        // –î–æ–±–∞–≤–ª—è–µ–º hover —ç—Ñ—Ñ–µ–∫—Ç
        popup.querySelectorAll('.character-option').forEach(option => {
            option.addEventListener('mouseenter', () => {
                option.style.borderColor = '#4CAF50';
                option.style.background = 'rgba(76, 175, 80, 0.2)';
            });
            option.addEventListener('mouseleave', () => {
                option.style.borderColor = 'transparent';
                option.style.background = 'rgba(76, 175, 80, 0.1)';
            });
        });
    }

    // –í—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    selectCharacter(characterId, lobbyCode) {
        console.log('–í—ã–±—Ä–∞–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂:', characterId);
        
        if (this.socket && this.isConnected) {
            this.socket.send(JSON.stringify({
                type: 'take_over_character',
                targetPlayerId: characterId,
                lobbyCode: lobbyCode
            }));
        }
    }

    // –û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    cancelCharacterSelection() {
        const popup = document.getElementById('characterSelectionPopup');
        if (popup) {
            popup.remove();
        }
        this.hideModal();
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤–∑—è—Ç–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    handleCharacterTakenOver(message) {
        console.log('=== –ù–ê–ß–ê–õ–û handleCharacterTakenOver –≤ multiplayer.js ===');
        console.log('–ü–µ—Ä—Å–æ–Ω–∞–∂ —É—Å–ø–µ—à–Ω–æ –≤–∑—è—Ç:', message);
        console.log('gameIntegration –¥–æ—Å—Ç—É–ø–µ–Ω:', !!this.gameIntegration);
        console.log('onCharacterTakenOver –¥–æ—Å—Ç—É–ø–µ–Ω:', !!(this.gameIntegration && this.gameIntegration.onCharacterTakenOver));
        console.log('üîó –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∫–µ—Ç–∞ –ø–æ—Å–ª–µ –≤–∑—è—Ç–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:', this.socket?.readyState);
        console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ —Å–æ–∫–µ—Ç:', this.isConnected);
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–ø–∞–ø –≤—ã–±–æ—Ä–∞
        const popup = document.getElementById('characterSelectionPopup');
        if (popup) {
            popup.remove();
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º ID –∏–≥—Ä–æ–∫–∞
        this.playerId = message.playerId;
        this.lobbyCode = message.lobbyCode;
        
        // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Å–æ–∫–µ—Ç –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω
        if (this.socket && this.socket.readyState === WebSocket.OPEN) {
            console.log('‚úÖ –°–æ–∫–µ—Ç –∞–∫—Ç–∏–≤–µ–Ω –ø–æ—Å–ª–µ –≤–∑—è—Ç–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞');
        } else {
            console.error('‚ùå –°–æ–∫–µ—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –ø–æ—Å–ª–µ –≤–∑—è—Ç–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!', this.socket?.readyState);
        }
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä–æ–≤—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        if (this.gameIntegration && this.gameIntegration.onCharacterTakenOver) {
            console.log('üéØ –í—ã–∑—ã–≤–∞–µ–º gameIntegration.onCharacterTakenOver...');
            this.gameIntegration.onCharacterTakenOver(message);
            console.log('‚úÖ gameIntegration.onCharacterTakenOver –≤—ã–ø–æ–ª–Ω–µ–Ω');
        } else {
            console.error('‚ùå gameIntegration –∏–ª–∏ onCharacterTakenOver –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
        this.updatePlayersList(message.players);
        
        console.log('–ò–≥—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫–∞–∫:', message.character.name);
        console.log('=== –ö–û–ù–ï–¶ handleCharacterTakenOver –≤ multiplayer.js ===');
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
    handlePlayerReconnected(message) {
        console.log('–ò–≥—Ä–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏–ª—Å—è:', message);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
        this.updatePlayersList(message.players);
        
        if (this.gameIntegration && this.gameIntegration.onPlayerReconnected) {
            this.gameIntegration.onPlayerReconnected(message);
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Ö–æ—Å—Ç–∞
    handleHostDisconnected(message) {
        console.log('üö® –•–æ—Å—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è:', message);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç
        if (message.countdownStarted) {
            console.log('‚è∞ –ó–∞–ø—É—Å–∫–∞–µ–º 2-–º–∏–Ω—É—Ç–Ω—ã–π –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Ö–æ—Å—Ç–∞');
            this.showHostReconnectionCountdown(message);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
        this.updatePlayersList(message.players);
        
        if (this.gameIntegration && this.gameIntegration.onHostDisconnected) {
            this.gameIntegration.onHostDisconnected(message);
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Ç—É–∞—Ü–∏–∏ –∫–æ–≥–¥–∞ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –æ—Ñ—Ñ–ª–∞–π–Ω
    handleAllPlayersOffline(message) {
        console.log('‚ö†Ô∏è –í—Å–µ –∏–≥—Ä–æ–∫–∏ –æ—Ñ—Ñ–ª–∞–π–Ω:', message);
        
        if (this.gameIntegration && this.gameIntegration.onAllPlayersOffline) {
            this.gameIntegration.onAllPlayersOffline(message);
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ª–æ–±–±–∏
    handleRecoveryLobbyCreated(message) {
        console.log('‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–±–±–∏ —Å–æ–∑–¥–∞–Ω–æ:', message);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ª–æ–±–±–∏
        this.lobbyCode = message.code;
        this.isHost = true;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
        this.updatePlayersList(message.players);
        
        if (this.gameIntegration && this.gameIntegration.onRecoveryLobbyCreated) {
            this.gameIntegration.onRecoveryLobbyCreated(message);
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è —Ö–æ—Å—Ç–∞
    handleHostReconnected(message) {
        console.log('‚úÖ –•–æ—Å—Ç –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏–ª—Å—è:', message);
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞ –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ
        this.hideHostReconnectionCountdown();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
        this.updatePlayersList(message.players);
        
        if (this.gameIntegration && this.gameIntegration.onHostReconnected) {
            this.gameIntegration.onHostReconnected(message);
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ª–æ–±–±–∏ –∏–∑-–∑–∞ –Ω–µ—è–≤–∫–∏ —Ö–æ—Å—Ç–∞
    handleLobbyClosedHostTimeout(message) {
        console.log('‚ùå –õ–æ–±–±–∏ –∑–∞–∫—Ä—ã—Ç–æ –∏–∑-–∑–∞ –Ω–µ—è–≤–∫–∏ —Ö–æ—Å—Ç–∞:', message);
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
        this.hideHostReconnectionCountdown();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        alert(message.message || '–õ–æ–±–±–∏ –∑–∞–∫—Ä—ã—Ç–æ - —Ö–æ—Å—Ç –Ω–µ –≤–µ—Ä–Ω—É–ª—Å—è');
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        this.leaveGame();
        
        if (this.gameIntegration && this.gameIntegration.onLobbyClosedHostTimeout) {
            this.gameIntegration.onLobbyClosedHostTimeout(message);
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ª–æ–±–±–∏ –∏–∑-–∑–∞ –≤—ã—Ö–æ–¥–∞ —Ö–æ—Å—Ç–∞
    handleLobbyClosedHostLeft(message) {
        console.log('‚ùå –õ–æ–±–±–∏ –∑–∞–∫—Ä—ã—Ç–æ –∏–∑-–∑–∞ –≤—ã—Ö–æ–¥–∞ —Ö–æ—Å—Ç–∞:', message);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        alert(message.message || '–õ–æ–±–±–∏ –∑–∞–∫—Ä—ã—Ç–æ - —Ö–æ—Å—Ç –ø–æ–∫–∏–Ω—É–ª –∏–≥—Ä—É');
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        this.leaveGame();
        
        if (this.gameIntegration && this.gameIntegration.onLobbyClosedHostLeft) {
            this.gameIntegration.onLobbyClosedHostLeft(message);
        }
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è —Ö–æ—Å—Ç–∞
    showHostReconnectionCountdown(message) {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –æ–∫–Ω–æ –µ—Å–ª–∏ –µ—Å—Ç—å
        this.hideHostReconnectionCountdown();
        
        const countdownDuration = message.countdownDuration || 120; // —Å–µ–∫—É–Ω–¥—ã
        let remainingTime = countdownDuration;
        
        // –°–æ–∑–¥–∞–µ–º –ø–æ–ø–∞–ø
        const popup = document.createElement('div');
        popup.id = 'hostReconnectionCountdown';
        popup.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 10000;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        `;
        
        const content = document.createElement('div');
        content.style.cssText = `
            background: linear-gradient(135deg, #1a1a2e, #16213e);
            color: white;
            padding: 30px;
            border-radius: 15px;
            text-align: center;
            border: 2px solid #ff6b6b;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            max-width: 500px;
            width: 90%;
        `;
        
        content.innerHTML = `
            <h2 style="margin: 0 0 20px 0; color: #ff6b6b;">üö® –•–æ—Å—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è</h2>
            <p style="margin: 0 0 20px 0; font-size: 18px;">–û–∂–∏–¥–∞–µ–º –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è —Ö–æ—Å—Ç–∞...</p>
            <div id="countdownTimer" style="font-size: 48px; font-weight: bold; color: #4ecdc4; margin: 20px 0;">
                ${this.formatTime(remainingTime)}
            </div>
            <p style="margin: 0; opacity: 0.8;">–ï—Å–ª–∏ —Ö–æ—Å—Ç –Ω–µ –≤–µ—Ä–Ω–µ—Ç—Å—è, –ª–æ–±–±–∏ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–æ</p>
            
            <div style="margin-top: 30px;">
                <h3 style="margin: 0 0 10px 0; color: #4ecdc4;">–ò–≥—Ä–æ–∫–∏ –≤ –ª–æ–±–±–∏:</h3>
                <div id="countdownPlayersList" style="text-align: left; margin-top: 15px;"></div>
            </div>
        `;
        
        popup.appendChild(content);
        document.body.appendChild(popup);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –≤ –ø–æ–ø–∞–ø–µ
        this.updateCountdownPlayersList(message.players);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
        this.hostCountdownInterval = setInterval(() => {
            remainingTime--;
            const timerElement = document.getElementById('countdownTimer');
            if (timerElement) {
                timerElement.textContent = this.formatTime(remainingTime);
                
                // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –∫–æ–≥–¥–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –º–∞–ª–æ –≤—Ä–µ–º–µ–Ω–∏
                if (remainingTime <= 30) {
                    timerElement.style.color = '#ff6b6b';
                } else if (remainingTime <= 60) {
                    timerElement.style.color = '#ffa726';
                }
            }
            
            if (remainingTime <= 0) {
                clearInterval(this.hostCountdownInterval);
                // –°–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–∞–º –∑–∞–∫—Ä—ã—Ç—å –ª–æ–±–±–∏, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
                console.log('‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Ö–æ—Å—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ');
            }
        }, 1000);
        
        console.log('‚è∞ –û–∫–Ω–æ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞ –ø–æ–∫–∞–∑–∞–Ω–æ');
    }
    
    // –°–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
    hideHostReconnectionCountdown() {
        const popup = document.getElementById('hostReconnectionCountdown');
        if (popup) {
            popup.remove();
        }
        
        if (this.hostCountdownInterval) {
            clearInterval(this.hostCountdownInterval);
            this.hostCountdownInterval = null;
        }
        
        console.log('‚è∞ –û–∫–Ω–æ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞ —Å–∫—Ä—ã—Ç–æ');
    }
    
    // –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –≤ –æ–∫–Ω–µ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
    updateCountdownPlayersList(players) {
        const listElement = document.getElementById('countdownPlayersList');
        if (!listElement || !players) return;
        
        listElement.innerHTML = players.map(player => {
            const statusColor = player.status === 'online' ? '#4CAF50' : '#f44336';
            const statusIcon = player.status === 'online' ? 'üü¢' : 'üî¥';
            
            return `
                <div style="display: flex; justify-content: space-between; align-items: center; padding: 8px; margin: 5px 0; background: rgba(255,255,255,0.1); border-radius: 8px;">
                    <span>${player.character?.name || player.name}</span>
                    <span style="color: ${statusColor};">${statusIcon} ${this.getStatusText(player.status)}</span>
                </div>
            `;
        }).join('');
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–º–º:—Å—Å)
    formatTime(seconds) {
        const minutes = Math.floor(seconds / 60);
        const remainingSeconds = seconds % 60;
        return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ª–æ–±–±–∏
    createRecoveryLobby(gameData, originalLobbyCode) {
        console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ª–æ–±–±–∏...');
        
        if (this.socket && this.isConnected) {
            this.socket.send(JSON.stringify({
                type: 'create_recovery_lobby',
                gameData: gameData,
                originalLobbyCode: originalLobbyCode
            }));
        }
    }

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è UI –¥–ª—è –º—É–ª—å—Ç–∏–ø–ª–µ—î—Ä–∞
    initializeUI() {
        // –°—Ç–≤–æ—Ä—é—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –¥–ª—è –º—É–ª—å—Ç–∏–ø–ª–µ—î—Ä–∞
        const multiplayerModal = document.createElement('div');
        multiplayerModal.id = 'multiplayerModal';
        multiplayerModal.className = 'modal';
        multiplayerModal.innerHTML = `
            <div class="modal-content">
                <div class="modal-header">
                    <h2 id="multiplayerModalTitle">üéÆ –ú—É–ª—å—Ç–∏–ø–ª–µ—î—Ä (–ë–ï–¢–ê)</h2>
                    <span class="close" id="closeMultiplayer">&times;</span>
                </div>
                <div class="modal-body">
                    <div class="beta-warning">
                        <h3 id="betaWarningTitle">‚ö†Ô∏è –£–í–ê–ì–ê: –ë–ï–¢–ê –í–ï–†–°–Ü–Ø</h3>
                        <p id="betaWarningText">–ú—É–ª—å—Ç–∏–ø–ª–µ—î—Ä –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Å—Ç–∞–¥—ñ—ó –±–µ—Ç–∞-—Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è. –ú–æ–∂–ª–∏–≤—ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –±–∞–ª–∞–Ω—Å–æ–º —Ç–∞ —Å—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—é.</p>
                    </div>
                    
                    <div id="multiplayerMenu">
                        <button id="hostGameBtn" class="mp-btn primary">–°—Ç–≤–æ—Ä–∏—Ç–∏ –ª–æ–±—ñ</button>
                        <button id="joinGameBtn" class="mp-btn secondary">–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –ª–æ–±—ñ</button>
                        <button id="reconnectHostBtn" class="mp-btn warning" style="display: none;">–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç–∏—Å—è —è–∫ —Ö–æ—Å—Ç</button>
                        <button id="loadMultiplayerGameBtn" class="mp-btn info">–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –º—É–ª—å—Ç–∏–ø–ª–µ—î—Ä–Ω—É –≥—Ä—É</button>
                    </div>
                    
                    <div id="hostLobby" style="display: none;">
                        <h3 id="lobbyCodeTitle">–í–∞—à –∫–æ–¥ –ª–æ–±—ñ:</h3>
                        <div class="lobby-code" id="lobbyCodeDisplay"></div>
                        <p id="shareLobbyText">–ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Ü–∏–º –∫–æ–¥–æ–º –∑ –¥—Ä—É–∑—è–º–∏</p>
                        <div id="playersList"></div>
                        <button id="startGameBtn" class="mp-btn primary" disabled>–ü–æ—á–∞—Ç–∏ –≥—Ä—É</button>
                    </div>
                    
                    <div id="joinLobby" style="display: none;">
                        <h3 id="enterLobbyCodeTitle">–í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –ª–æ–±—ñ:</h3>
                        <input type="text" id="lobbyCodeInput" placeholder="–ö–æ–¥ –ª–æ–±—ñ (6 —Å–∏–º–≤–æ–ª—ñ–≤)" maxlength="6">
                        <button id="connectBtn" class="mp-btn primary">–ü—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è</button>
                    </div>
                    
                    <div id="gameSession" style="display: none;">
                        <div class="players-status">
                            <h3 id="playersInSessionTitle">–ì—Ä–∞–≤—Ü—ñ –≤ —Å–µ—Å—ñ—ó:</h3>
                            <div id="playersStatus"></div>
                        </div>
                        <div class="action-status">
                            <div id="actionStatus">–û—á—ñ–∫—É–≤–∞–Ω–Ω—è –¥—ñ–π –≥—Ä–∞–≤—Ü—ñ–≤...</div>
                            <div id="actionProgress"></div>
                        </div>
                        <button id="leaveGameBtn" class="mp-btn danger">–ü–æ–∫–∏–Ω—É—Ç–∏ –≥—Ä—É</button>
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(multiplayerModal);
        
        // –î–æ–¥–∞—î–º–æ —Å—Ç–∏–ª—ñ
        this.addStyles();
        
        // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
        this.attachEventListeners();
    }

    addStyles() {
        const style = document.createElement('style');
        style.textContent = `
            .modal {
                display: none;
                position: fixed;
                z-index: 1000;
                left: 0;
                top: 0;
                width: 100%;
                height: 100%;
                background-color: rgba(0,0,0,0.5);
            }
            
            .modal-content {
                background-color: #2a2a2a;
                margin: 5% auto;
                padding: 0;
                border: 1px solid #555;
                border-radius: 10px;
                width: 90%;
                max-width: 500px;
                color: #fff;
            }
            
            .modal-header {
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                padding: 20px;
                border-radius: 10px 10px 0 0;
                display: flex;
                justify-content: space-between;
                align-items: center;
            }
            
            .modal-header h2 {
                margin: 0;
                color: white;
            }
            
            .close {
                color: white;
                font-size: 28px;
                font-weight: bold;
                cursor: pointer;
            }
            
            .close:hover {
                opacity: 0.7;
            }
            
            .modal-body {
                padding: 20px;
            }
            
            .beta-warning {
                background: #ff6b35;
                padding: 15px;
                border-radius: 8px;
                margin-bottom: 20px;
                text-align: center;
            }
            
            .beta-warning h3 {
                margin: 0 0 10px 0;
                color: white;
            }
            
            .beta-warning p {
                margin: 0;
                color: white;
                font-size: 14px;
            }
            
            .mp-btn {
                padding: 12px 24px;
                border: none;
                border-radius: 6px;
                cursor: pointer;
                font-size: 16px;
                margin: 5px;
                transition: all 0.3s ease;
                width: 100%;
            }
            
            .mp-btn.primary {
                background: #4CAF50;
                color: white;
            }
            
            .mp-btn.secondary {
                background: #2196F3;
                color: white;
            }
            
            .mp-btn.danger {
                background: #f44336;
                color: white;
            }
            
            .mp-btn.warning {
                background: linear-gradient(135deg, #f39c12, #e67e22);
                color: white;
            }
            
            .mp-btn.info {
                background: linear-gradient(135deg, #3498db, #2980b9);
                color: white;
            }
            
            .mp-btn:hover:not(:disabled) {
                transform: translateY(-2px);
                box-shadow: 0 4px 8px rgba(0,0,0,0.3);
            }
            
            .mp-btn:disabled {
                background: #666;
                cursor: not-allowed;
                opacity: 0.6;
            }
            
            .lobby-code {
                font-size: 32px;
                font-weight: bold;
                text-align: center;
                background: #333;
                padding: 20px;
                border-radius: 8px;
                margin: 10px 0;
                letter-spacing: 4px;
                color: #4CAF50;
            }
            
            #lobbyCodeInput {
                width: 100%;
                padding: 12px;
                font-size: 18px;
                border: 2px solid #555;
                border-radius: 6px;
                background: #333;
                color: white;
                text-align: center;
                letter-spacing: 2px;
                text-transform: uppercase;
                margin-bottom: 15px;
            }
            
            .players-status, .action-status {
                background: #333;
                padding: 15px;
                border-radius: 8px;
                margin: 10px 0;
            }
            
            .player-item {
                display: flex;
                justify-content: space-between;
                align-items: center;
                padding: 8px 0;
                border-bottom: 1px solid #555;
            }
            
            .player-item:last-child {
                border-bottom: none;
            }
            
            .player-status {
                padding: 4px 8px;
                border-radius: 4px;
                font-size: 12px;
            }
            
            .status-online {
                background: #4CAF50;
                color: white;
            }
            
            .status-offline {
                background: #f44336;
                color: white;
            }
            
            .status-waiting {
                background: #ff9800;
                color: white;
            }
            
            .action-progress {
                margin-top: 10px;
            }
            
            .progress-bar {
                width: 100%;
                height: 20px;
                background: #555;
                border-radius: 10px;
                overflow: hidden;
            }
            
            .progress-fill {
                height: 100%;
                background: linear-gradient(90deg, #4CAF50, #45a049);
                transition: width 0.3s ease;
            }
        `;
        document.head.appendChild(style);
    }

    attachEventListeners() {
        // –ó–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
        document.getElementById('closeMultiplayer').addEventListener('click', () => {
            this.hideModal();
        });

        // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ª–æ–±—ñ
        document.getElementById('hostGameBtn').addEventListener('click', () => {
            this.hostGame();
        });

        // –ü—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –ª–æ–±—ñ
        document.getElementById('joinGameBtn').addEventListener('click', () => {
            this.showJoinLobby();
        });

        // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ª–æ–±—ñ
        document.getElementById('connectBtn').addEventListener('click', () => {
            const code = document.getElementById('lobbyCodeInput').value.trim().toUpperCase();
            if (code.length === 6) {
                this.joinGame(code);
            } else {
                alert('–ö–æ–¥ –ª–æ–±—ñ –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ 6 —Å–∏–º–≤–æ–ª—ñ–≤');
            }
        });

        // –ü–æ—á–∞—Ç–æ–∫ –≥—Ä–∏
        document.getElementById('startGameBtn').addEventListener('click', () => {
            this.startMultiplayerGame();
        });

        // –ü–æ–∫–∏–Ω—É—Ç–∏ –≥—Ä—É
        document.getElementById('leaveGameBtn').addEventListener('click', () => {
            this.leaveGame();
        });

        // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–∫ —Ö–æ—Å—Ç
        document.getElementById('reconnectHostBtn').addEventListener('click', () => {
            this.reconnectAsHost();
        });

        // –ó–∞–≥—Ä—É–∑–∫–∞ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–Ω–æ–π –∏–≥—Ä—ã
        document.getElementById('loadMultiplayerGameBtn').addEventListener('click', () => {
            this.loadMultiplayerGameWithApiKey();
        });

        // –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ–¥—É –ª–æ–±—ñ
        document.getElementById('lobbyCodeInput').addEventListener('input', (e) => {
            e.target.value = e.target.value.toUpperCase().replace(/[^A-Z0-9]/g, '');
        });
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞
    updateUITexts() {
        const getText = (key) => {
            // Fallback to window.getText if it exists
            if (typeof window.getText === 'function') {
                return window.getText(key);
            }
            if (window.localization && window.gameState && window.localization[window.gameState.language]) {
                return window.localization[window.gameState.language][key] || key;
            }
            return key;
        };

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        document.getElementById('multiplayerModalTitle').textContent = `üéÆ ${getText('multiplayer')}`;
        document.getElementById('betaWarningTitle').textContent = getText('multiplayerBetaWarning');
        document.getElementById('betaWarningText').textContent = getText('multiplayerBetaDesc');
        
        document.getElementById('hostGameBtn').textContent = getText('createLobby');
        document.getElementById('joinGameBtn').textContent = getText('joinLobby');
        
        document.getElementById('lobbyCodeTitle').textContent = getText('lobbyCode');
        document.getElementById('shareLobbyText').textContent = getText('shareLobbyCode');
        document.getElementById('startGameBtn').textContent = getText('startGame');
        
        document.getElementById('enterLobbyCodeTitle').textContent = getText('enterLobbyCode');
        document.getElementById('lobbyCodeInput').placeholder = getText('lobbyCodePlaceholder');
        document.getElementById('connectBtn').textContent = getText('connect');
        
        document.getElementById('playersInSessionTitle').textContent = getText('playersInSession');
        document.getElementById('leaveGameBtn').textContent = getText('leaveGame');
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–æ–¥—É –ª–æ–±—ñ
    generateLobbyCode() {
        const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
        let result = '';
        for (let i = 0; i < 6; i++) {
            result += chars.charAt(Math.floor(Math.random() * chars.length));
        }
        return result;
    }

    // –ü–æ–∫–∞–∑–∞—Ç–∏ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
    showModal() {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç—ã –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º
        this.updateUITexts();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ö–æ—Å—Ç –ª–æ–±–±–∏
        const lastLobby = this.getLastHostLobby();
        const reconnectBtn = document.getElementById('reconnectHostBtn');
        if (lastLobby && reconnectBtn) {
            reconnectBtn.style.display = 'block';
            reconnectBtn.textContent = `üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ –ª–æ–±—ñ ${lastLobby}`;
        } else if (reconnectBtn) {
            reconnectBtn.style.display = 'none';
        }
        
        document.getElementById('multiplayerModal').style.display = 'block';
    }

    // –°—Ö–æ–≤–∞—Ç–∏ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
    hideModal() {
        document.getElementById('multiplayerModal').style.display = 'none';
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –µ—Å–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ –∏–≥—Ä–∞
        if (!window.multiplayerState || !window.multiplayerState.isActive) {
            document.getElementById('mainMenu').style.display = 'block';
        }
    }

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∏
    hostGame() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –ª–æ–±–±–∏
        if (!window.gameState || !window.gameState.apiKey) {
            this.showApiKeyInput();
            return;
        }
        
        this.createLobby();
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–µ –≤–≤–æ–¥–∞ API –∫–ª—é—á–∞ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
    showApiKeyInput() {
        const getText = window.getText || ((key) => key);
        const multiplayerMenu = document.getElementById('multiplayerMenu');
        
        multiplayerMenu.innerHTML = `
            <div class="api-key-section">
                <h3 style="color: #4ecdc4; margin-bottom: 15px;">
                    üîë ${getText('enterApiKey') || '–í–≤–µ–¥—ñ—Ç—å Gemini API –∫–ª—é—á'}
                </h3>
                <p style="margin-bottom: 15px; color: #ccc; font-size: 0.9em;">
                    ${getText('hostApiKeyRequired') || '–•–æ—Å—Ç –ø–æ–≤–∏–Ω–µ–Ω –Ω–∞–¥–∞—Ç–∏ API –∫–ª—é—á –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ª–æ–±—ñ'}
                </p>
                <input type="password" id="multiplayerApiKey" placeholder="${getText('apiKeyPlaceholder') || 'Gemini API –∫–ª—é—á'}" 
                       style="width: 100%; padding: 10px; margin-bottom: 15px; border: 1px solid #4ecdc4; border-radius: 5px; background: rgba(0,0,0,0.3); color: white;">
                <div style="display: flex; gap: 10px;">
                    <button onclick="window.multiplayerManager.saveApiKeyAndCreateLobby()" class="mp-btn primary" style="flex: 1;">
                        ${getText('createLobby') || '–°—Ç–≤–æ—Ä–∏—Ç–∏ –ª–æ–±—ñ'}
                    </button>
                    <button onclick="window.multiplayerManager.backToMultiplayerMenu()" class="mp-btn secondary" style="flex: 1;">
                        ${getText('back') || '–ù–∞–∑–∞–¥'}
                    </button>
                </div>
            </div>
        `;
    }
    
    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å API –∫–ª—é—á –∏ —Å–æ–∑–¥–∞—Ç—å –ª–æ–±–±–∏
    saveApiKeyAndCreateLobby() {
        const apiKey = document.getElementById('multiplayerApiKey').value.trim();
        if (!apiKey) {
            const getText = window.getText || ((key) => key);
            alert(getText('enterApiKey') || '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å API –∫–ª—é—á');
            return;
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º API –∫–ª—é—á –≤ gameState
        if (!window.gameState) {
            window.gameState = { apiKey: '' };
        }
        window.gameState.apiKey = apiKey;
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –∏ —Å–æ–∑–¥–∞–µ–º –ª–æ–±–±–∏
        this.backToMultiplayerMenu();
        this.createLobby();
    }
    
    // –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞
    backToMultiplayerMenu() {
        const getText = window.getText || ((key) => key);
        const multiplayerMenu = document.getElementById('multiplayerMenu');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ö–æ—Å—Ç –ª–æ–±–±–∏ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        const lastLobby = this.getLastHostLobby();
        const reconnectButton = lastLobby ? 
            `<button id="reconnectHostBtn" class="mp-btn warning">üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ –ª–æ–±—ñ ${lastLobby}</button>` : 
            `<button id="reconnectHostBtn" class="mp-btn warning" style="display: none;">–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç–∏—Å—è —è–∫ —Ö–æ—Å—Ç</button>`;
        
        multiplayerMenu.innerHTML = `
            <button id="hostGameBtn" class="mp-btn primary">${getText('createLobby') || '–°—Ç–≤–æ—Ä–∏—Ç–∏ –ª–æ–±—ñ'}</button>
            <button id="joinGameBtn" class="mp-btn secondary">${getText('joinLobby') || '–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –ª–æ–±—ñ'}</button>
            ${reconnectButton}
            <button id="loadMultiplayerGameBtn" class="mp-btn info">–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –º—É–ª—å—Ç–∏–ø–ª–µ—î—Ä–Ω—É –≥—Ä—É</button>
        `;
        
        // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        document.getElementById('hostGameBtn').onclick = () => this.hostGame();
        document.getElementById('joinGameBtn').onclick = () => this.showJoinLobby();
        document.getElementById('reconnectHostBtn').onclick = () => this.reconnectAsHost();
        document.getElementById('loadMultiplayerGameBtn').onclick = () => this.loadMultiplayerGameWithApiKey();
    }
    
    // –°–æ–∑–¥–∞—Ç—å –ª–æ–±–±–∏ (–≤—ã–¥–µ–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
    createLobby() {
        this.isHost = true;
        this.lobbyCode = this.generateLobbyCode();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ö–æ—Å—Ç –ª–æ–±–±–∏
        this.saveLastHostLobby(this.lobbyCode);
        
        document.getElementById('multiplayerMenu').style.display = 'none';
        document.getElementById('hostLobby').style.display = 'block';
        document.getElementById('lobbyCodeDisplay').textContent = this.lobbyCode;
        
        this.connectToServer();
    }

    // –ü–æ–∫–∞–∑ –µ–∫—Ä–∞–Ω—É –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –ª–æ–±—ñ
    showJoinLobby() {
        document.getElementById('multiplayerMenu').style.display = 'none';
        document.getElementById('joinLobby').style.display = 'block';
    }

    // –ü—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –≥—Ä–∏
    joinGame(code) {
        this.isHost = false;
        this.lobbyCode = code;
        
        document.getElementById('joinLobby').style.display = 'none';
        
        this.connectToServer();
    }

    // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–∫ —Ö–æ—Å—Ç –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –ª–æ–±–±–∏
    reconnectAsHost() {
        const lastLobby = this.getLastHostLobby();
        if (!lastLobby) {
            alert('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ö–æ—Å—Ç –ª–æ–±–±–∏');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
        if (!window.gameState || !window.gameState.apiKey) {
            this.showApiKeyInputForReconnect(lastLobby);
            return;
        }

        this.performHostReconnect(lastLobby);
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–µ –≤–≤–æ–¥–∞ API –∫–ª—é—á–∞ –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ö–æ—Å—Ç–∞
    showApiKeyInputForReconnect(lobbyCode) {
        const getText = window.getText || ((key) => key);
        const multiplayerMenu = document.getElementById('multiplayerMenu');
        
        multiplayerMenu.innerHTML = `
            <div class="api-key-section">
                <h3 style="color: #f39c12; margin-bottom: 15px;">
                    üîë ${getText('enterApiKey') || '–í–≤–µ–¥—ñ—Ç—å Gemini API –∫–ª—é—á'}
                </h3>
                <p style="margin-bottom: 15px; color: #ccc; font-size: 0.9em;">
                    –î–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ª–æ–±—ñ <strong>${lobbyCode}</strong> —è–∫ —Ö–æ—Å—Ç –ø–æ—Ç—Ä—ñ–±–µ–Ω API –∫–ª—é—á
                </p>
                <input type="password" id="reconnectApiKey" placeholder="${getText('apiKeyPlaceholder') || 'Gemini API –∫–ª—é—á'}" 
                       style="width: 100%; padding: 10px; margin-bottom: 15px; border: 1px solid #f39c12; border-radius: 5px; background: rgba(0,0,0,0.3); color: white;">
                <div style="display: flex; gap: 10px;">
                    <button onclick="window.multiplayerManager.saveApiKeyAndReconnect('${lobbyCode}')" class="mp-btn warning" style="flex: 1;">
                        üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç–∏—Å—è
                    </button>
                    <button onclick="window.multiplayerManager.backToMultiplayerMenu()" class="mp-btn secondary" style="flex: 1;">
                        ${getText('back') || '–ù–∞–∑–∞–¥'}
                    </button>
                </div>
            </div>
        `;
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–Ω–æ–π –∏–≥—Ä—ã —Å –∑–∞–ø—Ä–æ—Å–æ–º API –∫–ª—é—á–∞
    loadMultiplayerGameWithApiKey() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
        if (!window.gameState || !window.gameState.apiKey) {
            this.showApiKeyInputForLoad();
            return;
        }

        this.performMultiplayerLoad();
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–µ –≤–≤–æ–¥–∞ API –∫–ª—é—á–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    showApiKeyInputForLoad() {
        const getText = window.getText || ((key) => key);
        const multiplayerMenu = document.getElementById('multiplayerMenu');
        
        multiplayerMenu.innerHTML = `
            <div class="api-key-section">
                <h3 style="color: #3498db; margin-bottom: 15px;">
                    üîë ${getText('enterApiKey') || '–í–≤–µ–¥—ñ—Ç—å Gemini API –∫–ª—é—á'}
                </h3>
                <p style="margin-bottom: 15px; color: #ccc; font-size: 0.9em;">
                    –î–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º—É–ª—å—Ç–∏–ø–ª–µ—î—Ä–Ω–æ—ó –≥—Ä–∏ –ø–æ—Ç—Ä—ñ–±–µ–Ω API –∫–ª—é—á
                </p>
                <input type="password" id="loadApiKey" placeholder="${getText('apiKeyPlaceholder') || 'Gemini API –∫–ª—é—á'}" 
                       style="width: 100%; padding: 10px; margin-bottom: 15px; border: 1px solid #3498db; border-radius: 5px; background: rgba(0,0,0,0.3); color: white;">
                <div style="display: flex; gap: 10px;">
                    <button onclick="window.multiplayerManager.saveApiKeyAndLoad()" class="mp-btn info" style="flex: 1;">
                        üìÇ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏
                    </button>
                    <button onclick="window.multiplayerManager.backToMultiplayerMenu()" class="mp-btn secondary" style="flex: 1;">
                        ${getText('back') || '–ù–∞–∑–∞–¥'}
                    </button>
                </div>
            </div>
        `;
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ API –∫–ª—é—á–∞ –∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    saveApiKeyAndReconnect(lobbyCode) {
        const apiKey = document.getElementById('reconnectApiKey').value.trim();
        if (!apiKey) {
            alert('–í–≤–µ–¥—ñ—Ç—å API –∫–ª—é—á');
            return;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º API –∫–ª—é—á
        if (!window.gameState) {
            window.gameState = {};
        }
        window.gameState.apiKey = apiKey;
        localStorage.setItem('dndApiKey', apiKey);

        this.performHostReconnect(lobbyCode);
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ API –∫–ª—é—á–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞
    saveApiKeyAndLoad() {
        const apiKey = document.getElementById('loadApiKey').value.trim();
        if (!apiKey) {
            alert('–í–≤–µ–¥—ñ—Ç—å API –∫–ª—é—á');
            return;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º API –∫–ª—é—á
        if (!window.gameState) {
            window.gameState = {};
        }
        window.gameState.apiKey = apiKey;
        localStorage.setItem('dndApiKey', apiKey);

        this.performMultiplayerLoad();
    }

    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ö–æ—Å—Ç–∞
    performHostReconnect(lobbyCode) {
        this.isHost = true;
        this.lobbyCode = lobbyCode;
        
        document.getElementById('multiplayerMenu').style.display = 'none';
        document.getElementById('hostLobby').style.display = 'block';
        document.getElementById('lobbyCodeDisplay').textContent = this.lobbyCode;
        
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ö–æ—Å—Ç–∞
        this.connectToServerForReconnect(lobbyCode);
    }
    
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ö–æ—Å—Ç–∞
    connectToServerForReconnect(lobbyCode) {
        console.log('üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ö–æ—Å—Ç–∞ –∫ –ª–æ–±–±–∏:', lobbyCode);
        
        if (this.socket && this.socket.readyState === WebSocket.OPEN) {
            this.socket.close();
        }
        
        this.socket = new WebSocket(this.serverUrl);
        
        this.socket.onopen = () => {
            console.log('‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ö–æ—Å—Ç–∞');
            this.isConnected = true;
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ö–æ—Å—Ç–∞
            this.socket.send(JSON.stringify({
                type: 'reconnect_host',
                playerId: this.playerId,
                lobbyCode: lobbyCode
            }));
        };
        
        this.socket.onmessage = (event) => {
            try {
                const message = JSON.parse(event.data);
                this.handleServerMessage(message);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ —Ö–æ—Å—Ç–∞:', error);
            }
        };
        
        this.socket.onclose = () => {
            console.log('‚ùå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
            this.isConnected = false;
            this.handleDisconnection();
        };
        
        this.socket.onerror = (error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ WebSocket:', error);
            this.isConnected = false;
        };
    }

    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–Ω–æ–π –∏–≥—Ä—ã
    performMultiplayerLoad() {
        // –°–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞
        this.hideModal();
        
        // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–Ω–æ–π –∏–≥—Ä—ã –∏–∑ game.js
        if (window.loadMultiplayerGame) {
            window.loadMultiplayerGame();
        } else {
            alert('–§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–Ω–æ–π –∏–≥—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
        }
    }

    // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞
    connectToServer() {
        const serverUrl = 'ws://localhost:3001';
        // const serverUrl = 'wss://ai-rpg-c4df.onrender.com';
// const serverUrl = 'wss://f486-185-136-134-229.ngrok-free.app';
        console.log('–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞:', serverUrl);
        
        try {
            this.socket = new WebSocket(serverUrl);
            
            this.socket.onopen = () => {
                console.log('–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ —Å–µ—Ä–≤–µ—Ä–∞');
                this.isConnected = true;
                this.reconnectAttempts = 0;
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                this.startPing();
                
                if (this.isHost) {
                    // –°—Ç–≤–æ—Ä—é—î–º–æ –ª–æ–±—ñ
                    this.socket.send(JSON.stringify({
                        type: 'create_lobby',
                        code: this.lobbyCode,
                        playerId: this.playerId,
                        playerName: this.getPlayerName()
                    }));
                } else {
                    // –ü—Ä–∏—î–¥–Ω—É—î–º–æ—Å—è –¥–æ –ª–æ–±—ñ
                    this.socket.send(JSON.stringify({
                        type: 'join_lobby',
                        code: this.lobbyCode,
                        playerId: this.playerId,
                        playerName: this.getPlayerName()
                    }));
                }
            };
            
            this.socket.onmessage = (event) => {
                try {
                    const message = JSON.parse(event.data);
                    this.handleServerMessage(message);
                } catch (error) {
                    console.error('–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', error);
                }
            };
            
            this.socket.onclose = () => {
                console.log('–ó\'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º –∑–∞–∫—Ä–∏—Ç–æ');
                this.isConnected = false;
                this.stopPing(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—É –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                this.handleDisconnection();
            };
            
            this.socket.onerror = (error) => {
                console.error('–ü–æ–º–∏–ª–∫–∞ WebSocket:', error);
                this.isConnected = false;
            };
            
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è WebSocket:', error);
            alert('–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ.');
        }
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∫–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Ö–æ—Å—Ç–∞
    kickPlayer(playerId) {
        if (!this.isHost) {
            console.error('–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –∫–∏–∫–∞—Ç—å –∏–≥—Ä–æ–∫–æ–≤');
            return;
        }
        
        if (this.socket && this.isConnected) {
            this.socket.send(JSON.stringify({
                type: 'kick_player',
                playerId: playerId
            }));
        }
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 3: –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–∏–∫–∞ –¥–ª—è —Ö–æ—Å—Ç–∞
    updatePlayersList(players) {
        console.log('=== –ù–ê–ß–ê–õ–û updatePlayersList ===');
        console.log('–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ players:', players);
        try {
            console.log('updatePlayersList –≤—ã–∑–≤–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏:', players);
            this.players = players;
            console.log('this.players —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
            const playersList = document.getElementById('playersList');
            const playersStatus = document.getElementById('playersStatus');
            console.log('–≠–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã:', {playersList: !!playersList, playersStatus: !!playersStatus});
        
        console.log('–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–≥—Ä–æ–∫–æ–≤...');
        const playersHTML = players.map(player => {
            console.log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–≥—Ä–æ–∫–∞ ${player.name}: character =`, player.character, ', status =', player.status);
            const kickButton = this.isHost && player.id !== this.playerId ? 
                `<button onclick="window.multiplayerManager.kickPlayer('${player.id}')" 
                         style="background: #f44336; color: white; border: none; border-radius: 3px; padding: 2px 8px; margin-left: 10px; cursor: pointer; font-size: 10px;">
                    ‚ùå –ö–∏–∫
                </button>` : '';
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–ª–∏—á–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            let playerStatus = player.status;
            let statusText = this.getStatusText(playerStatus);
            
            if (player.character) {
                statusText = '‚úÖ –ì–æ—Ç–æ–≤';
                playerStatus = 'ready';
            } else if (playerStatus === 'online') {
                statusText = '‚è≥ –°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞';
                playerStatus = 'creating';
            }
            
            return `
                <div class="player-item">
                    <span>${player.name}${kickButton}</span>
                    <span class="player-status status-${playerStatus}">${statusText}</span>
                </div>
            `;
        }).join('');
        
        console.log('HTML –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω, –¥–ª–∏–Ω–∞:', playersHTML.length);
        
        if (playersList) {
            const getText = window.getText || ((key) => key);
            const playersTitle = getText('playersInLobby') || `–ì—Ä–∞–≤—Ü—ñ (${players.length}/4):`;
            playersList.innerHTML = `<h4>${playersTitle}</h4>` + playersHTML;
        }
        
        if (playersStatus) {
            playersStatus.innerHTML = playersHTML;
        }
        
        // –ê–∫—Ç–∏–≤—É—î–º–æ –∫–Ω–æ–ø–∫—É –ø–æ—á–∞—Ç–∫—É –≥—Ä–∏ –¥–ª—è —Ö–æ—Å—Ç–∞
        const startBtn = document.getElementById('startGameBtn');
        console.log('–ò—â–µ–º –∫–Ω–æ–ø–∫—É startGameBtn:', startBtn ? '–Ω–∞–π–¥–µ–Ω–∞' : '–ù–ï –Ω–∞–π–¥–µ–Ω–∞');
        console.log('–Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ö–æ—Å—Ç–æ–º:', this.isHost);
        if (startBtn && this.isHost) {
            const getText = window.getText || ((key) => key);
            const playersWithCharacters = players.filter(p => p.character);
            console.log('–û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ä—Ç–∞ –∏–≥—Ä—ã. –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤:', players.length, '—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏:', playersWithCharacters.length);
            
            // –î–ª—è –ù–û–í–´–• –∏–≥—Ä - –Ω—É–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ 2+ –∏–≥—Ä–æ–∫–∞
            // –î–ª—è –ó–ê–ì–†–£–ñ–ï–ù–ù–´–• –∏–≥—Ä - –Ω—É–∂–Ω–æ 2+ –∏–≥—Ä–æ–∫–∞ —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏
            const hasLoadedGame = window.loadedGameData || window.pendingLoadedGameData;
            const canStart = hasLoadedGame ? playersWithCharacters.length >= 2 : players.length >= 2;
            
            startBtn.disabled = !canStart;
            
            if (!canStart) {
                if (hasLoadedGame) {
                    startBtn.textContent = getText('needMinPlayersBtn') || `–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞ —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏ (${playersWithCharacters.length}/4)`;
                } else {
                    startBtn.textContent = getText('needMinPlayersBtn') || `–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞ (${players.length}/4)`;
                }
            } else {
                if (hasLoadedGame) {
                    startBtn.textContent = getText('startGameBtn') || `–ù–∞—á–∞—Ç—å –∏–≥—Ä—É (${playersWithCharacters.length} –≥–æ—Ç–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤)`;
                } else {
                    startBtn.textContent = getText('startGameBtn') || `–ù–∞—á–∞—Ç—å –∏–≥—Ä—É (${players.length} –∏–≥—Ä–æ–∫–æ–≤)`;
                }
            }
            console.log('–ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞. Disabled:', startBtn.disabled, 'Text:', startBtn.textContent);
        }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤ updatePlayersList:', error);
        }
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 4: –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    handleServerMessage(message) {
        console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', message.type, message);
        console.log('üîó –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∫–µ—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', this.socket?.readyState);
        console.log('üîó –§–ª–∞–≥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', this.isConnected);
        
        switch (message.type) {
            case 'lobby_created':
                // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º playerId –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞
                if (message.playerId) {
                    console.log('–û–±–Ω–æ–≤–ª—è–µ–º playerId —Å', this.playerId, '–Ω–∞', message.playerId);
                    this.playerId = message.playerId;
                }
                this.updatePlayersList(message.players);
                if (this.gameIntegration && this.gameIntegration.onLobbyCreated) {
                    this.gameIntegration.onLobbyCreated(message);
                }
                break;
                
            case 'lobby_joined':
                // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º playerId –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –ª–æ–±–±–∏
                if (message.playerId) {
                    console.log('–û–±–Ω–æ–≤–ª—è–µ–º playerId –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –ª–æ–±–±–∏ —Å', this.playerId, '–Ω–∞', message.playerId);
                    this.playerId = message.playerId;
                }
                this.updatePlayersList(message.players);
                if (this.gameIntegration && this.gameIntegration.onLobbyJoined) {
                    this.gameIntegration.onLobbyJoined(message);
                }
                break;
                
            case 'player_joined':
                console.log('–ò–≥—Ä–æ–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –ª–æ–±–±–∏. –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏:', message.players.length);
                console.log('–í—ã–∑—ã–≤–∞–µ–º updatePlayersList...');
                // –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤, ID —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ lobby_joined
                this.updatePlayersList(message.players);
                console.log('updatePlayersList –∑–∞–≤–µ—Ä—à–µ–Ω');
                if (this.gameIntegration && this.gameIntegration.onPlayerJoined) {
                    this.gameIntegration.onPlayerJoined(message);
                }
                break;
                
            case 'player_left':
                this.updatePlayersList(message.players);
                if (this.gameIntegration && this.gameIntegration.onPlayerLeft) {
                    this.gameIntegration.onPlayerLeft(message);
                }
                break;
                
            case 'player_kicked':
                if (message.kickedPlayerId === this.playerId) {
                    // –≠—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∫–∏–∫–Ω—É–ª–∏
                    const getText = window.getText || ((key) => key);
                    alert(getText('youWereKicked') || '–í–∞—Å –∏—Å–∫–ª—é—á–∏–ª–∏ –∏–∑ –ª–æ–±–±–∏');
                    this.leaveGame();
                } else {
                    // –ö—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–π –±—ã–ª –∫–∏–∫–Ω—É—Ç
                    this.updatePlayersList(message.players);
                }
                break;
                
            case 'host_reconnect_success':
                console.log('‚úÖ –•–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –ª–æ–±–±–∏');
                
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
                this.currentActions = {};
                console.log('üîÑ –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –æ—á–∏—â–µ–Ω–æ –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ —Ö–æ—Å—Ç–∞');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
                this.updatePlayersList(message.players);
                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –µ—Å–ª–∏ –µ—Å—Ç—å
                if (message.gameState && this.gameIntegration && this.gameIntegration.onHostReconnectSuccess) {
                    this.gameIntegration.onHostReconnectSuccess(message);
                }
                break;
                
            case 'host_reconnected':
                console.log('‚úÖ –•–æ—Å—Ç –≤–µ—Ä–Ω—É–ª—Å—è –≤ –∏–≥—Ä—É');
                // –°–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∂–∏–¥–∞–Ω–∏–∏ —Ö–æ—Å—Ç–∞
                if (this.gameIntegration && this.gameIntegration.onHostReconnected) {
                    this.gameIntegration.onHostReconnected(message);
                }
                break;
                
            case 'game_started':
                console.log('–ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞, —Å–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞');
                
                // –í–∞–∂–Ω–æ: –ù–ï –≤—ã–∑—ã–≤–∞–µ–º hideModal(), —Ç–∞–∫ –∫–∞–∫ –∏–≥—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞
                document.getElementById('multiplayerModal').style.display = 'none';
                
                if (this.gameIntegration && this.gameIntegration.onGameStarted) {
                    this.gameIntegration.onGameStarted(message);
                }
                break;
                
            case 'loaded_game_started':
                console.log('üîÑ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–∞—è –∏–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞ - —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ');
                console.log('üîç –î–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', message);
                console.log('üé≠ –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: isHost =', this.isHost);
                
                // –°–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
                document.getElementById('multiplayerModal').style.display = 'none';
                
                if (this.gameIntegration && this.gameIntegration.onLoadedGameStarted) {
                    console.log('‚úÖ –í—ã–∑—ã–≤–∞–µ–º onLoadedGameStarted');
                    this.gameIntegration.onLoadedGameStarted(message);
                } else {
                    console.error('‚ùå gameIntegration –∏–ª–∏ onLoadedGameStarted –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                }
                break;
                
            case 'character_created':
                console.log('–ü–µ—Ä—Å–æ–Ω–∞–∂ —Å–æ–∑–¥–∞–Ω –∏–≥—Ä–æ–∫–æ–º:', message.playerId, message.character);
                console.log('–ü–æ–ª—É—á–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤:', message.players);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ —Å –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                if (message.players) {
                    console.log('–û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤...');
                    this.updatePlayersList(message.players);
                }
                
                if (this.gameIntegration && this.gameIntegration.onCharacterCreated) {
                    this.gameIntegration.onCharacterCreated(message);
                }
                break;
                
            case 'loaded_game_characters_available':
                console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –∏–≥—Ä—ã:', message.characters);
                console.log('üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:', Object.keys(message.characters).length);
                this.showLoadedGameCharacterSelection(message.characters, message.hostCharacter, message.lastStory, message.lastImage);
                break;
                
            case 'character_assigned':
                console.log('üëë –ü–æ–ª—É—á–µ–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂:', message.character.name);
                
                // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º playerId –µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω —Å–µ—Ä–≤–µ—Ä–æ–º
                if (message.playerId) {
                    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º playerId –¥–ª—è character_assigned —Å', this.playerId, '–Ω–∞', message.playerId);
                    this.playerId = message.playerId;
                }
                
                if (this.gameIntegration && this.gameIntegration.onCharacterAssigned) {
                    this.gameIntegration.onCharacterAssigned(message);
                }
                break;
                
            case 'all_characters_ready':
                if (this.gameIntegration && this.gameIntegration.onAllCharactersReady) {
                    this.gameIntegration.onAllCharactersReady(message);
                }
                break;
                
            case 'initial_story_received':
                if (this.gameIntegration && this.gameIntegration.onInitialStoryReceived) {
                    this.gameIntegration.onInitialStoryReceived(message);
                }
                break;
                
            case 'action_received':
                if (this.gameIntegration && this.gameIntegration.onActionReceived) {
                    this.gameIntegration.onActionReceived(message);
                }
                break;
                
            case 'all_actions_received':
                if (this.gameIntegration && this.gameIntegration.onAllActionsReceived) {
                    this.gameIntegration.onAllActionsReceived(message);
                }
                break;
                
            case 'turn_complete':
                if (this.gameIntegration && this.gameIntegration.onTurnComplete) {
                    this.gameIntegration.onTurnComplete(message);
                }
                break;
                
            case 'image_shared':
                if (this.gameIntegration && this.gameIntegration.onImageShared) {
                    this.gameIntegration.onImageShared(message);
                }
                break;
                
            case 'player_disconnected':
                if (this.gameIntegration && this.gameIntegration.onPlayerDisconnected) {
                    this.gameIntegration.onPlayerDisconnected(message);
                }
                break;
                
                case 'pong':
                this.handlePong();
                break;
                
            case 'turn_state_reset':
                this.handleTurnStateReset(message);
                break;
                
            case 'ai_error_notification':
                this.handleAIErrorNotification(message);
                break;
                
            case 'character_selection_required':
                this.showCharacterSelectionPopup(message);
                break;
                
            case 'character_taken_over':
                console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ character_taken_over –≤ multiplayer.js:', message);
                this.handleCharacterTakenOver(message);
                break;
                
            case 'player_reconnected':
                this.handlePlayerReconnected(message);
                break;
                
            case 'host_disconnected':
                this.handleHostDisconnected(message);
                break;
                
            case 'all_players_offline':
                this.handleAllPlayersOffline(message);
                break;
                
            case 'recovery_lobby_created':
                this.handleRecoveryLobbyCreated(message);
                break;
                
            case 'host_reconnected':
                this.handleHostReconnected(message);
                break;
                
            case 'lobby_closed_host_timeout':
                this.handleLobbyClosedHostTimeout(message);
                break;
                
            case 'lobby_closed_host_left':
                this.handleLobbyClosedHostLeft(message);
                break;
                
            case 'error':
                    if (this.gameIntegration && this.gameIntegration.onError) {
                        this.gameIntegration.onError(message);
                    } else {
                        alert('–ü–æ–º–∏–ª–∫–∞: ' + message.message);
                    }
                    break;
            }
            
    }
    getPlayerName() {
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –∏–∑ gameState
        if (window.gameState && window.gameState.character && window.gameState.character.name) {
            return window.gameState.character.name;
        }
        
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const getText = window.getText || ((key) => key);
        const name = prompt(getText('enterPlayerName') || '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:');
        return name || `Player${this.playerId.slice(-4)}`;
    }
    



    getStatusText(status) {
        const getText = (key) => {
            // Fallback to window.getText if it exists
            if (typeof window.getText === 'function') {
                return window.getText(key);
            }
            if (window.localization && window.gameState && window.localization[window.gameState.language]) {
                return window.localization[window.gameState.language][key] || key;
            }
            return key;
        };

        const statusTexts = {
            online: getText('online'),
            offline: getText('offline'),
            waiting: getText('waiting'),
            ready: getText('ready')
        };
        return statusTexts[status] || status;
    }

    // –ü–æ—á–∞—Ç–æ–∫ –º—É–ª—å—Ç–∏–ø–ª–µ—î—Ä–Ω–æ—ó –≥—Ä–∏
    startMultiplayerGame() {
        if (!this.isHost) {
            console.error('–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É');
            return;
        }
        
        // –î–ª—è –ù–û–í–´–• –∏–≥—Ä - —Å—á–∏—Ç–∞–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ (–ø–µ—Ä—Å–æ–Ω–∞–∂–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞)
        // –î–ª—è –ó–ê–ì–†–£–ñ–ï–ù–ù–´–• –∏–≥—Ä - —Å—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–æ–≤ —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏
        const hasLoadedGame = window.loadedGameData || window.pendingLoadedGameData;
        
        if (hasLoadedGame) {
            // –õ–æ–≥–∏–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–≥—Ä - –Ω—É–∂–Ω—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∏
            const playersWithCharacters = this.players.filter(p => p.character);
            console.log('üéÆ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ó–ê–ì–†–£–ñ–ï–ù–ù–û–ô –∏–≥—Ä—ã:', {
                –≤—Å–µ–≥–æ_–∏–≥—Ä–æ–∫–æ–≤: this.players.length,
                —Å_–ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏: playersWithCharacters.length,
                —Å–ø–∏—Å–æ–∫: this.players.map(p => `${p.name}: ${p.character ? '–µ—Å—Ç—å' : '–Ω–µ—Ç'} –ø–µ—Ä—Å–æ–Ω–∞–∂`)
            });
            
            if (playersWithCharacters.length < 2) {
                alert(`–î–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –∏–≥—Ä—ã –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞ —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏. –°–µ–π—á–∞—Å –≥–æ—Ç–æ–≤—ã: ${playersWithCharacters.length}`);
                return;
            }
        } else {
            // –õ–æ–≥–∏–∫–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –∏–≥—Ä - –ø—Ä–æ—Å—Ç–æ –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞
            console.log('üéÆ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ù–û–í–û–ô –∏–≥—Ä—ã:', {
                –≤—Å–µ–≥–æ_–∏–≥—Ä–æ–∫–æ–≤: this.players.length,
                —Å–ø–∏—Å–æ–∫: this.players.map(p => p.name)
            });
            
            if (this.players.length < 2) {
                alert(`–ü–æ—Ç—Ä—ñ–±–Ω–æ –º—ñ–Ω—ñ–º—É–º 2 –≥—Ä–∞–≤—Ü—ñ. –ó–∞—Ä–∞–∑ –≤ –ª–æ–±—ñ: ${this.players.length}`);
                return;
            }
        }
        
        if (!window.gameState || !window.gameState.apiKey) {
            alert('–•–æ—Å—Ç –ø–æ–≤–∏–Ω–µ–Ω –Ω–∞–¥–∞—Ç–∏ Gemini API –∫–ª—é—á –ø–µ—Ä–µ–¥ –ø–æ—á–∞—Ç–∫–æ–º –≥—Ä–∏');
            return;
        }
        
        if (this.socket && this.isConnected) {
            console.log('–•–æ—Å—Ç –∑–∞–ø—É—Å–∫–∞—î –º—É–ª—å—Ç–∏–ø–ª–µ—î—Ä–Ω—É –≥—Ä—É...');
            this.socket.send(JSON.stringify({
                type: 'start_game',
                language: window.gameState.language || 'uk',
                isMultiplayer: true,
                hostApiKey: window.gameState.apiKey,
                shortResponses: window.gameState.shortResponses || false
            }));
        }
    }

    // –ü–æ–∫–∏–Ω—É—Ç–∏ –≥—Ä—É
    leaveGame() {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        this.stopPing();
        
        if (this.socket) {
            this.socket.close();
            this.socket = null;
        }
        
        this.isConnected = false;
        this.isHost = false;
        this.lobbyCode = null;
        this.players = [];
        this.currentActions = {};
        
        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
        document.getElementById('hostLobby').style.display = 'none';
        document.getElementById('joinLobby').style.display = 'none';
        document.getElementById('gameSession').style.display = 'none';
        document.getElementById('multiplayerMenu').style.display = 'block';
        
        this.hideModal();
    }

    // –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
    handleDisconnection() {
        if (this.reconnectAttempts < this.maxReconnectAttempts) {
            if (window.handleMultiplayerDisconnect) {
                window.handleMultiplayerDisconnect();
            }
        } else {
            alert('–í—Ç—Ä–∞—á–µ–Ω–æ –∑\'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º');
            this.leaveGame();
        }
    }

    // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    reconnect() {
        this.reconnectAttempts++;
        setTimeout(() => this.connectToServer(), 2000);
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∞–∫—Ç–∏–≤–Ω–∏–π –º—É–ª—å—Ç–∏–ø–ª–µ—î—Ä
    isMultiplayerActive() {
        return this.isConnected && this.socket;
    }

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≥—Ä–∞–≤—Ü—ñ–≤
    getPlayerCount() {
        return this.players.length;
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –∏–≥—Ä—ã
    showLoadedGameCharacterSelection(characters, hostCharacter, lastStory, lastImage) {
        console.log('–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –∏–≥—Ä—ã');
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        this.hideModal();
        
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        const charactersArray = Object.values(characters);
        let charactersHTML = '';
        
        if (charactersArray.length === 0) {
            charactersHTML = '<p class="no-characters">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∏–≥—Ä—ã</p>';
        } else {
            charactersHTML = charactersArray.map(playerData => {
                const character = playerData.character;
                return `
                    <div class="character-selection-card" onclick="window.multiplayerManager.selectLoadedCharacter('${playerData.playerId}', '${character.name}')">
                        <h4>${character.name}</h4>
                        <p class="character-class">${character.class}</p>
                        <p class="character-level">–†—ñ–≤–µ–Ω—å ${character.level}</p>
                        <div class="character-stats">
                            <span class="stat-hp">‚ù§Ô∏è ${character.health}/${character.maxHealth}</span>
                            <span class="stat-mana">üîÆ ${character.mana}/${character.maxMana}</span>
                        </div>
                        <div class="character-perks">
                            ${character.perks ? character.perks.slice(0, 2).map(perk => `<span class="perk">${perk}</span>`).join('') : ''}
                        </div>
                    </div>
                `;
            }).join('');
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–≥—Ä—ã –µ—Å–ª–∏ –µ—Å—Ç—å
        let gameContextHTML = '';
        if (lastStory) {
            gameContextHTML = `
                <div class="game-context">
                    <h4>üìñ –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏:</h4>
                    <div class="last-story">${lastStory.length > 200 ? lastStory.substring(0, 200) + '...' : lastStory}</div>
                </div>
            `;
        }
        
        if (lastImage) {
            gameContextHTML += `
                <div class="game-image">
                    <h4>üñºÔ∏è –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</h4>
                    <img src="${lastImage}" alt="–ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ü–µ–Ω–∞" style="max-width: 200px; border-radius: 8px;">
                </div>
            `;
        }
        
        const modalHTML = `
            <div id="characterSelectionModal" class="modal" style="display: block;">
                <div class="modal-content" style="max-width: 800px;">
                    <div class="modal-header">
                        <h2>üé≠ –í–∏–±—ñ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</h2>
                        <span class="close" onclick="window.multiplayerManager.hideCharacterSelectionModal()">&times;</span>
                    </div>
                    <div class="modal-body">
                        <div class="character-selection-info">
                            <h3>–ü—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ—ó –≥—Ä–∏</h3>
                            <p>–•–æ—Å—Ç <strong>${hostCharacter.name}</strong> –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–≤ –∑–±–µ—Ä–µ–∂–µ–Ω—É –≥—Ä—É.</p>
                            <p>–í–∏–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, —è–∫–∏–º —Ö–æ—á–µ—Ç–µ –≥—Ä–∞—Ç–∏:</p>
                        </div>
                        
                        ${gameContextHTML}
                        
                        <div class="characters-grid">
                            ${charactersHTML}
                        </div>
                        
                        <div class="character-selection-actions">
                            <button onclick="window.multiplayerManager.createNewCharacterInstead()" class="mp-btn secondary">
                                ‚ú® –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
                            </button>
                            <button onclick="window.multiplayerManager.hideCharacterSelectionModal()" class="mp-btn danger">
                                ‚ùå –ü–æ–∫–∏–Ω—É—Ç–∏ –ª–æ–±—ñ
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤ DOM
        document.body.insertAdjacentHTML('beforeend', modalHTML);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
        this.addCharacterSelectionStyles();
    }
    
    // –í—ã–±—Ä–∞—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    selectLoadedCharacter(originalPlayerId, characterName) {
        console.log('–í—ã–±—Ä–∞–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂:', characterName, '–æ—Ç –∏–≥—Ä–æ–∫–∞:', originalPlayerId);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –≤–∑—è—Ç–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª—å
        if (this.socket && this.isConnected) {
            this.socket.send(JSON.stringify({
                type: 'take_over_character',
                originalPlayerId: originalPlayerId,
                characterName: characterName
            }));
        }
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        this.hideCharacterSelectionModal();
    }
    
    // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤–º–µ—Å—Ç–æ –≤—ã–±–æ—Ä–∞ –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö
    createNewCharacterInstead() {
        console.log('–ò–≥—Ä–æ–∫ —Ä–µ—à–∏–ª —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞');
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞
        this.hideCharacterSelectionModal();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        if (this.gameIntegration && this.gameIntegration.onGameStarted) {
            // –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            this.gameIntegration.onGameStarted({
                players: this.players,
                isLoadedGame: true
            });
        }
    }
    
    // –°–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    hideCharacterSelectionModal() {
        const modal = document.getElementById('characterSelectionModal');
        if (modal) {
            modal.remove();
        }
    }
    
    // –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–ª–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    addCharacterSelectionStyles() {
        if (document.getElementById('characterSelectionStyles')) return;
        
        const style = document.createElement('style');
        style.id = 'characterSelectionStyles';
        style.textContent = `
            .character-selection-info {
                text-align: center;
                margin-bottom: 20px;
                padding: 15px;
                background: rgba(255, 255, 255, 0.1);
                border-radius: 8px;
            }
            
            .character-selection-info h3 {
                color: #4ecdc4;
                margin-bottom: 10px;
            }
            
            .game-context {
                margin: 15px 0;
                padding: 15px;
                background: rgba(255, 193, 7, 0.1);
                border-radius: 8px;
                border-left: 3px solid #ffc107;
            }
            
            .game-context h4 {
                color: #ffc107;
                margin-bottom: 10px;
            }
            
            .last-story {
                color: #ddd;
                line-height: 1.4;
                font-style: italic;
            }
            
            .game-image {
                text-align: center;
                margin: 15px 0;
                padding: 15px;
                background: rgba(78, 205, 196, 0.1);
                border-radius: 8px;
                border-left: 3px solid #4ecdc4;
            }
            
            .game-image h4 {
                color: #4ecdc4;
                margin-bottom: 10px;
            }
            
            .characters-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                gap: 15px;
                margin: 20px 0;
            }
            
            .character-selection-card {
                background: rgba(255, 255, 255, 0.1);
                border: 2px solid rgba(255, 255, 255, 0.2);
                border-radius: 10px;
                padding: 15px;
                cursor: pointer;
                transition: all 0.3s ease;
                text-align: center;
            }
            
            .character-selection-card:hover {
                border-color: #4ecdc4;
                background: rgba(78, 205, 196, 0.2);
                transform: translateY(-3px);
                box-shadow: 0 5px 15px rgba(78, 205, 196, 0.3);
            }
            
            .character-selection-card h4 {
                color: #fff;
                margin: 0 0 8px 0;
                font-size: 18px;
            }
            
            .character-class {
                color: #4ecdc4;
                font-weight: bold;
                margin: 0 0 5px 0;
                text-transform: capitalize;
            }
            
            .character-level {
                color: #f39c12;
                margin: 0 0 10px 0;
                font-size: 14px;
            }
            
            .character-stats {
                display: flex;
                justify-content: space-around;
                margin: 10px 0;
                font-size: 12px;
            }
            
            .stat-hp {
                color: #e74c3c;
            }
            
            .stat-mana {
                color: #3498db;
            }
            
            .character-perks {
                display: flex;
                flex-wrap: wrap;
                gap: 5px;
                justify-content: center;
                margin-top: 10px;
            }
            
            .perk {
                background: rgba(155, 89, 182, 0.3);
                border: 1px solid rgba(155, 89, 182, 0.5);
                border-radius: 12px;
                padding: 2px 8px;
                font-size: 10px;
                color: #ddd;
            }
            
            .character-selection-actions {
                display: flex;
                gap: 10px;
                justify-content: center;
                margin-top: 20px;
                padding-top: 15px;
                border-top: 1px solid rgba(255, 255, 255, 0.2);
            }
            
            .no-characters {
                text-align: center;
                color: #95a5a6;
                font-style: italic;
                padding: 40px 20px;
                grid-column: 1 / -1;
            }
        `;
        
        document.head.appendChild(style);
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –º—É–ª—å—Ç–∏–ø–ª–µ—î—Ä–∞
window.multiplayerManager = new MultiplayerManager();

// –ï–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ —ñ–Ω—à–∏—Ö —Ñ–∞–π–ª–∞—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = MultiplayerManager;
}